{
  "address": "0xd37E73f197EC78FD08833AEeaD6EddF105a3FB33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "Name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "StakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMyFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "StartBlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "EndBlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "StartingAmountLocked",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "Initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct StakingVe.LockVe",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getUnclaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "isUserLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "ownerRemoveNonDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_deferUnclaimed",
          "type": "bool"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb51a6dbc9034c9eecd63e6b65d4aaa59d55f5d6af0985b267afdcd670b308edb",
  "receipt": {
    "to": null,
    "from": "0x44A4b9E2A69d86BA382a511f845CbF2E31286770",
    "contractAddress": "0xd37E73f197EC78FD08833AEeaD6EddF105a3FB33",
    "transactionIndex": 3,
    "gasUsed": "2285301",
    "logsBloom": "0x
    "blockHash": "0x871b1cd79f8ff1b6257baa4f6b00cb0b3193fd1d71e7008bf1d3326f81744c9b",
    "transactionHash": "0xb51a6dbc9034c9eecd63e6b65d4aaa59d55f5d6af0985b267afdcd670b308edb",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 6503772,
        "transactionHash": "0xb51a6dbc9034c9eecd63e6b65d4aaa59d55f5d6af0985b267afdcd670b308edb",
        "address": "0xd37E73f197EC78FD08833AEeaD6EddF105a3FB33",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x871b1cd79f8ff1b6257baa4f6b00cb0b3193fd1d71e7008bf1d3326f81744c9b"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 6503772,
        "transactionHash": "0xb51a6dbc9034c9eecd63e6b65d4aaa59d55f5d6af0985b267afdcd670b308edb",
        "address": "0xd37E73f197EC78FD08833AEeaD6EddF105a3FB33",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x871b1cd79f8ff1b6257baa4f6b00cb0b3193fd1d71e7008bf1d3326f81744c9b"
      }
    ],
    "blockNumber": 6503772,
    "cumulativeGasUsed": "3115933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57b8a194230ef402584130B1eD31d2C4682d7a71",
    "sAxial",
    "sAXIAL",
    "0x44A4b9E2A69d86BA382a511f845CbF2E31286770"
  ],
  "numDeployments": 2,
  "solcInputHash": "3a66861e92703f6fcdc9aba30a71295d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"StakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMyFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"StartBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"EndBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"StartingAmountLocked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"Initialized\",\"type\":\"bool\"}],\"internalType\":\"struct StakingVe.LockVe\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"isUserLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ownerRemoveNonDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deferUnclaimed\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimMyFunds()\":{\"details\":\"This will need to be called by the web application via a button or some other means\"},\"constructor\":{\"params\":{\"_governance\":\"Address of wallet which will be given adminstrative access to this contract\",\"_name\":\"Desired name of our governance token\",\"_stakedToken\":\"Address of the token our users will deposit and lock in exchange for governance tokens\",\"_symbol\":\"Desired symbol of our governance token\"}},\"getAllUsers()\":{\"returns\":{\"_0\":\"An array of addresses of all users who have ever staked\"}},\"getBalance(address)\":{\"params\":{\"_userAddr\":\"Address of any user to view the number of tokens they still have locked\"},\"returns\":{\"_0\":\"Quantity of tokens the user has locked\"}},\"getLock(address)\":{\"details\":\"This may be used by the web application for graphical illustration purposes\",\"params\":{\"_userAddr\":\"Address of any user to view all Locks they have ever created\"},\"returns\":{\"_0\":\"Users Lock in the format of the LockVe struct\"}},\"getPower(address)\":{\"params\":{\"_userAddr\":\"Address of any user to view the number of governance tokens currently awarded to them\"},\"returns\":{\"_0\":\"Quantity of governance tokens allocated to the user\"}},\"getUnclaimed(address)\":{\"params\":{\"_userAddr\":\"Address of any user to view the number of vested tokens they have not yet claimed\"},\"returns\":{\"_0\":\"Quantity of tokens which have vested but are unclaimed by the specified user\"}},\"isUserLocked(address)\":{\"details\":\"This may be used by the web application to determine if the UI says \\\"Create Lock\\\" or \\\"Add to Lock\\\"\",\"params\":{\"_userAddr\":\"Address of any user to check\"},\"returns\":{\"_0\":\"True if the user has ever created a lock\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerRemoveNonDepositToken(address)\":{\"params\":{\"_token\":\"Address of the non-deposit token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256,uint256,bool)\":{\"params\":{\"_amount\":\"Number of additional tokens to deposit into the lock\",\"_deferUnclaimed\":\"If True, leaves any unclaimed vested balance in the staking contract\",\"_duration\":\"Number of seconds the invoking user will extend their lock for\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimMyFunds()\":{\"notice\":\"Transfers deposit tokens which have decayed over some portion of the lock period back to their original ownerIt is up to the user to invoke this in order to reclaim their original deposit tokens over time\"},\"constructor\":{\"notice\":\"Constructor\"},\"getAllUsers()\":{\"notice\":\"Retrieve a list of all users who have ever staked\"},\"getBalance(address)\":{\"notice\":\"Calculate the number of tokens a user still has locked, see also: getMyBalance()\"},\"getLock(address)\":{\"notice\":\"View a users Lock, see also GetMyLock()\"},\"getPower(address)\":{\"notice\":\"Calculate the number of governance tokens allocated to a user by this contract, see also: getMyPower()\"},\"getUnclaimed(address)\":{\"notice\":\"Calculate the number of vested tokens a user has not claimed, see also: getMyUnclaimed()\"},\"isUserLocked(address)\":{\"notice\":\"Check if a user has ever created a Lock in this contract\"},\"ownerRemoveNonDepositToken(address)\":{\"notice\":\"Allow owner to reclaim tokens not matching the deposit tokenSome users may have accidentally sent these to the contract\"},\"stake(uint256,uint256,bool)\":{\"notice\":\"Create/extend the duration of the invoking users lock and/or deposit additional tokens into it\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingVe.sol\":\"StakingVe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/StakingVe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title A vesting style staking contract with extendable linear decay\\n/// @author Auroter\\n/// @notice Allows you to lock tokens in exchange for governance tokens\\n/// @notice Locks can be extended or deposited into\\n/// @notice Maximum deposit duration is two years (104 weeks)\\n/// @dev Simply call stake(...) to create initial lock or extend one that already exists for the user\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\ncontract StakingVe is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Info pertaining to staking contract\\n    address public StakedToken; // An ERC20 Token to be staked (i.e. Axial)\\n    string public Name; // New asset after staking (i.e. sAxial)\\n    string public Symbol; // New asset symbol after staking (i.e. sAXIAL)\\n    uint256 private InterpolationGranularity = 1e18; // Note: ERC20.decimals() is for display and does not affect arithmetic!\\n\\n    // Info pertaining to users\\n    address[] private Users; // An array containing all user addresses\\n    mapping(address => LockVe) private Locks; // A mapping of each users lock\\n    mapping(address => uint256) private LockedFunds; // A mapping of each users total deposited funds\\n    mapping(address => uint256) private DeferredFunds; // A mapping of vested funds the user wishes to leave unclaimed\\n\\n    // Lock structure, only one of these is allowed per user\\n    // A DELTA can be derived as the degree of interpolation between the start/end block:\\n    // Delta = (end - now) / end - start\\n    // This can be used to determine how much of our staked token is unlocked:\\n    // currentAmountLocked = startingAmountLocked - (delta * startingAmountLocked)\\n    struct LockVe {\\n        uint256 StartBlockTime;\\n        uint256 EndBlockTime;\\n        uint256 StartingAmountLocked;\\n        bool Initialized;\\n    }\\n\\n    /// @notice Constructor\\n    /// @param _stakedToken Address of the token our users will deposit and lock in exchange for governance tokens\\n    /// @param _name Desired name of our governance token\\n    /// @param _symbol Desired symbol of our governance token\\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\\n    constructor(\\n        address _stakedToken,\\n        string memory _name,\\n        string memory _symbol,\\n        address _governance\\n    ) {\\n        transferOwnership(_governance);\\n        StakedToken = _stakedToken;\\n        Name = _name;\\n        Symbol = _symbol;\\n    }\\n\\n    /// @notice Calculate the number of vested tokens a user has not claimed, see also: getMyUnclaimed()\\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\\n    /// @return Quantity of tokens which have vested but are unclaimed by the specified user\\n    function getUnclaimed(address _userAddr) public view returns (uint256) {\\n        uint256 totalFundsDeposited = LockedFunds[_userAddr] + DeferredFunds[_userAddr];\\n        uint256 currentBalance = getBalance(_userAddr);\\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\\n        return fundsToClaim;\\n    }\\n\\n    /// @notice Calculate the number of tokens a user still has locked, see also: getMyBalance()\\n    /// @param _userAddr Address of any user to view the number of tokens they still have locked\\n    /// @return Quantity of tokens the user has locked\\n    function getBalance(address _userAddr) public view returns (uint256) {\\n        LockVe memory usersLock = Locks[_userAddr];\\n\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 balance = 0;\\n\\n        if (usersLock.EndBlockTime > currentTimestamp) {\\n            uint256 granularDelta = ((usersLock.EndBlockTime - currentTimestamp) * InterpolationGranularity) / (usersLock.EndBlockTime - usersLock.StartBlockTime);\\n            balance += (usersLock.StartingAmountLocked * granularDelta) / InterpolationGranularity;\\n        }\\n        return balance;\\n    }\\n\\n    /// @notice Calculate the number of governance tokens allocated to a user by this contract, see also: getMyPower()\\n    /// @param _userAddr Address of any user to view the number of governance tokens currently awarded to them\\n    /// @return Quantity of governance tokens allocated to the user\\n    function getPower(address _userAddr) public view returns (uint256) {\\n        LockVe memory usersLock = Locks[_userAddr];\\n\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 power = 0;\\n\\n        if (usersLock.EndBlockTime > currentTimestamp) {\\n            // We need to accomodate for the fact that we are dealing only in whole numbers\\n            // uint256 delta = (lock.EndBlockTime - currentTimestamp) / (lock.EndBlockTime - lock.StartBlockTime);\\n            uint256 startingAmountAwarded = ((usersLock.EndBlockTime - usersLock.StartBlockTime) * usersLock.StartingAmountLocked) / 104 weeks;\\n            uint256 granularDelta = ((usersLock.EndBlockTime - currentTimestamp) * InterpolationGranularity) / (usersLock.EndBlockTime - usersLock.StartBlockTime);\\n            power += (startingAmountAwarded * granularDelta) / InterpolationGranularity;\\n        }\\n        return power;\\n    }\\n\\n    /// @notice Retrieve a list of all users who have ever staked\\n    /// @return An array of addresses of all users who have ever staked\\n    function getAllUsers() public view returns (address[] memory) {\\n        return Users;\\n    }\\n\\n    /// @notice Check if a user has ever created a Lock in this contract\\n    /// @param _userAddr Address of any user to check\\n    /// @dev This may be used by the web application to determine if the UI says \\\"Create Lock\\\" or \\\"Add to Lock\\\"\\n    /// @return True if the user has ever created a lock\\n    function isUserLocked(address _userAddr) public view returns (bool) {\\n        LockVe memory usersLock = Locks[_userAddr];\\n        return usersLock.Initialized;\\n    }\\n\\n    /// @notice View a users Lock, see also GetMyLock()\\n    /// @param _userAddr Address of any user to view all Locks they have ever created\\n    /// @dev This may be used by the web application for graphical illustration purposes\\n    /// @return Users Lock in the format of the LockVe struct\\n    function getLock(address _userAddr) public view returns (LockVe memory) {\\n        return Locks[_userAddr];\\n    }\\n\\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\\n    /// @notice Some users may have accidentally sent these to the contract\\n    /// @param _token Address of the non-deposit token\\n    function ownerRemoveNonDepositToken(address _token) public nonReentrant onlyOwner {\\n        require(_token != StakedToken, \\\"!invalid\\\");\\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\\n        require(balanceOfToken > 0, \\\"!balance\\\");\\n        IERC20(_token).safeTransfer(owner(), balanceOfToken);\\n    }\\n\\n    /// @notice Transfers deposit tokens which have decayed over some portion of the lock period back to their original owner\\n    /// @notice It is up to the user to invoke this in order to reclaim their original deposit tokens over time\\n    /// @dev This will need to be called by the web application via a button or some other means\\n    function claimMyFunds() external nonReentrant {\\n        address userAddr = msg.sender;\\n        uint256 totalFundsDeposited = LockedFunds[userAddr] + DeferredFunds[userAddr];\\n        uint256 currentBalance = getBalance(userAddr);\\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\\n\\n        IERC20(StakedToken).safeTransfer(userAddr, fundsToClaim);\\n\\n        LockedFunds[userAddr] = currentBalance;\\n        DeferredFunds[userAddr] = 0;\\n    }\\n\\n    /// @notice Create/extend the duration of the invoking users lock and/or deposit additional tokens into it\\n    /// @param _duration Number of seconds the invoking user will extend their lock for\\n    /// @param _amount Number of additional tokens to deposit into the lock\\n    /// @param _deferUnclaimed If True, leaves any unclaimed vested balance in the staking contract\\n    function stake(uint256 _duration, uint256 _amount, bool _deferUnclaimed) public nonReentrant {\\n        require(_duration > 0 || _amount > 0, \\\"null\\\");\\n\\n        // Retrieve list of locks the user has already created\\n        address userAddr = msg.sender;\\n        LockVe memory usersLock = Locks[userAddr];\\n\\n        uint256 oldDurationRemaining = 0;\\n\\n        // Keep track of new user or pre-existing lockout period\\n        if (!usersLock.Initialized) {\\n            Users.push(userAddr);\\n        } else if (block.timestamp < usersLock.EndBlockTime) {\\n            oldDurationRemaining = usersLock.EndBlockTime - block.timestamp;\\n        }\\n\\n        require (oldDurationRemaining + _duration <= 104 weeks, \\\">2 years\\\");\\n\\n        // Receive the users tokens\\n        require(IERC20(StakedToken).balanceOf(userAddr) >= _amount, \\\"!balance\\\");\\n        IERC20(StakedToken).safeTransferFrom(userAddr,  address(this), _amount);\\n\\n        // Account for balance / unclaimed funds\\n        uint256 totalFundsDeposited = LockedFunds[userAddr];\\n        uint256 oldBalance = getBalance(userAddr);\\n        uint256 fundsUnclaimed = totalFundsDeposited - oldBalance;\\n        if (!_deferUnclaimed) {\\n            fundsUnclaimed += DeferredFunds[userAddr];\\n            IERC20(StakedToken).safeTransfer(userAddr, fundsUnclaimed);\\n            DeferredFunds[userAddr] = 0;\\n        } else {\\n            DeferredFunds[userAddr] += fundsUnclaimed;\\n        }\\n        uint256 newTotalDeposit = oldBalance + _amount;\\n\\n        // Update balance\\n        LockedFunds[userAddr] = newTotalDeposit;\\n\\n        // Fill out updated LockVe struct\\n        LockVe memory newLock;\\n        newLock.StartBlockTime = block.timestamp;\\n        newLock.EndBlockTime = newLock.StartBlockTime + _duration + oldDurationRemaining;\\n        newLock.StartingAmountLocked = newTotalDeposit;\\n        newLock.Initialized = true;\\n        Locks[userAddr] = newLock;\\n    }\\n}\\n\",\"keccak256\":\"0x3bd1d7bc14e65ac15402cef5b18244f5458d3f6b4567a8ef015182835fec14ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a76400006005553480156200001d57600080fd5b5060405162002d7038038062002d708339818101604052810190620000439190620005b9565b60016000819055506200006b6200005f620000f960201b60201c565b6200010160201b60201c565b6200007c81620001c760201b60201c565b83600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260039080519060200190620000d592919062000307565b508160049080519060200190620000ee92919062000307565b5050505050620007e9565b600033905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620001d7620000f960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001fd620002dd60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000256576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024d90620006ca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002c9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002c09062000762565b60405180910390fd5b620002da816200010160201b60201c565b50565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b8280546200031590620007b3565b90600052602060002090601f01602090048101928262000339576000855562000385565b82601f106200035457805160ff191683800117855562000385565b8280016001018555821562000385579182015b828111156200038457825182559160200191906001019062000367565b5b50905062000394919062000398565b5090565b5b80821115620003b357600081600090555060010162000399565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003f882620003cb565b9050919050565b6200040a81620003eb565b81146200041657600080fd5b50565b6000815190506200042a81620003ff565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000485826200043a565b810181811067ffffffffffffffff82111715620004a757620004a66200044b565b5b80604052505050565b6000620004bc620003b7565b9050620004ca82826200047a565b919050565b600067ffffffffffffffff821115620004ed57620004ec6200044b565b5b620004f8826200043a565b9050602081019050919050565b60005b838110156200052557808201518184015260208101905062000508565b8381111562000535576000848401525b50505050565b6000620005526200054c84620004cf565b620004b0565b90508281526020810184848401111562000571576200057062000435565b5b6200057e84828562000505565b509392505050565b600082601f8301126200059e576200059d62000430565b5b8151620005b08482602086016200053b565b91505092915050565b60008060008060808587031215620005d657620005d5620003c1565b5b6000620005e68782880162000419565b945050602085015167ffffffffffffffff8111156200060a5762000609620003c6565b5b620006188782880162000586565b935050604085015167ffffffffffffffff8111156200063c576200063b620003c6565b5b6200064a8782880162000586565b92505060606200065d8782880162000419565b91505092959194509250565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620006b260208362000669565b9150620006bf826200067a565b602082019050919050565b60006020820190508181036000830152620006e581620006a3565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200074a60268362000669565b91506200075782620006ec565b604082019050919050565b600060208201905081810360008301526200077d816200073b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620007cc57607f821691505b60208210811415620007e357620007e262000784565b5b50919050565b61257780620007f96000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063e2842d7911610066578063e2842d7914610274578063e313a11314610292578063f2fde38b1461029c578063f8b2cb4f146102b8576100f5565b8063715018a6146102105780638052474d1461021a5780638da5cb5b14610238578063dc07a2ed14610256576100f5565b80633ab1ced1116100d35780633ab1ced114610164578063561b2463146101945780635dd9147c146101b05780636b9db4e6146101e0576100f5565b8063204552b0146100fa5780633045aaf31461011657806330d0050514610134575b600080fd5b610114600480360381019061010f91906119ec565b6102e8565b005b61011e610551565b60405161012b9190611ab2565b60405180910390f35b61014e600480360381019061014991906119ec565b6105df565b60405161015b9190611aef565b60405180910390f35b61017e600480360381019061017991906119ec565b610674565b60405161018b9190611b23565b60405180910390f35b6101ae60048036038101906101a99190611b96565b61072b565b005b6101ca60048036038101906101c591906119ec565b610d50565b6040516101d79190611b23565b60405180910390f35b6101fa60048036038101906101f591906119ec565b610e94565b6040516102079190611c5c565b60405180910390f35b610218610f26565b005b610222610fae565b60405161022f9190611ab2565b60405180910390f35b61024061103c565b60405161024d9190611c86565b60405180910390f35b61025e611066565b60405161026b9190611c86565b60405180910390f35b61027c61108c565b6040516102899190611d5f565b60405180910390f35b61029a61111a565b005b6102b660048036038101906102b191906119ec565b6112fc565b005b6102d260048036038101906102cd91906119ec565b6113f4565b6040516102df9190611b23565b60405180910390f35b6002600054141561032e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032590611dcd565b60405180910390fd5b600260008190555061033e611505565b73ffffffffffffffffffffffffffffffffffffffff1661035c61103c565b73ffffffffffffffffffffffffffffffffffffffff16146103b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a990611e39565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043a90611ea5565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161047e9190611c86565b60206040518083038186803b15801561049657600080fd5b505afa1580156104aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ce9190611eda565b905060008111610513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050a90611f53565b60405180910390fd5b61054561051e61103c565b828473ffffffffffffffffffffffffffffffffffffffff1661150d9092919063ffffffff16565b50600160008190555050565b6004805461055e90611fa2565b80601f016020809104026020016040519081016040528092919081815260200182805461058a90611fa2565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b505050505081565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151915050919050565b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107019190612003565b9050600061070e846113f4565b90506000818361071e9190612059565b9050809350505050919050565b60026000541415610771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076890611dcd565b60405180910390fd5b600260008190555060008311806107885750600082115b6107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906120d9565b60405180910390fd5b60003390506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600081606001516108c6576006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108e6565b81602001514210156108e5574282602001516108e29190612059565b90505b5b6303bfc40086826108f79190612003565b1115610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90612145565b60405180910390fd5b84600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016109949190611c86565b60206040518083038186803b1580156109ac57600080fd5b505afa1580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190611eda565b1015610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90611f53565b60405180910390fd5b610a74833087600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611593909392919063ffffffff16565b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610ac3856113f4565b905060008183610ad39190612059565b905086610bbe57600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481610b259190612003565b9050610b748682600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661150d9092919063ffffffff16565b6000600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c15565b80600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c0d9190612003565b925050819055505b60008883610c239190612003565b905080600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c7161195f565b42816000018181525050858b8260000151610c8c9190612003565b610c969190612003565b81602001818152505081816040018181525050600181606001901515908115158152505080600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555090505050505050505050506001600081905550505050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600042905060008183602001511115610e895760006303bfc400846040015185600001518660200151610e0b9190612059565b610e159190612165565b610e1f91906121ee565b9050600084600001518560200151610e379190612059565b600554858760200151610e4a9190612059565b610e549190612165565b610e5e91906121ee565b90506005548183610e6f9190612165565b610e7991906121ee565b83610e849190612003565b925050505b809350505050919050565b610e9c61195f565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b610f2e611505565b73ffffffffffffffffffffffffffffffffffffffff16610f4c61103c565b73ffffffffffffffffffffffffffffffffffffffff1614610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9990611e39565b60405180910390fd5b610fac600061161c565b565b60038054610fbb90611fa2565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe790611fa2565b80156110345780601f1061100957610100808354040283529160200191611034565b820191906000526020600020905b81548152906001019060200180831161101757829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600680548060200260200160405190810160405280929190818152602001828054801561111057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116110c6575b5050505050905090565b60026000541415611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115790611dcd565b60405180910390fd5b600260008190555060003390506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111f99190612003565b90506000611206836113f4565b9050600081836112169190612059565b90506112658482600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661150d9092919063ffffffff16565b81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050506001600081905550565b611304611505565b73ffffffffffffffffffffffffffffffffffffffff1661132261103c565b73ffffffffffffffffffffffffffffffffffffffff1614611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f90611e39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113df90612291565b60405180910390fd5b6113f18161161c565b50565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506000429050600081836020015111156114fa576000836000015184602001516114a59190612059565b6005548486602001516114b89190612059565b6114c29190612165565b6114cc91906121ee565b90506005548185604001516114e19190612165565b6114eb91906121ee565b826114f69190612003565b9150505b809350505050919050565b600033905090565b61158e8363a9059cbb60e01b848460405160240161152c9291906122b1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116e2565b505050565b611616846323b872dd60e01b8585856040516024016115b4939291906122da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116e2565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611744826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117a99092919063ffffffff16565b90506000815111156117a457808060200190518101906117649190612326565b6117a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179a906123c5565b60405180910390fd5b5b505050565b60606117b884846000856117c1565b90509392505050565b606082471015611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd90612457565b60405180910390fd5b61180f856118d5565b61184e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611845906124c3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611877919061252a565b60006040518083038185875af1925050503d80600081146118b4576040519150601f19603f3d011682016040523d82523d6000602084013e6118b9565b606091505b50915091506118c98282866118f8565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561190857829050611958565b60008351111561191b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194f9190611ab2565b60405180910390fd5b9392505050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119b98261198e565b9050919050565b6119c9816119ae565b81146119d457600080fd5b50565b6000813590506119e6816119c0565b92915050565b600060208284031215611a0257611a01611989565b5b6000611a10848285016119d7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a53578082015181840152602081019050611a38565b83811115611a62576000848401525b50505050565b6000601f19601f8301169050919050565b6000611a8482611a19565b611a8e8185611a24565b9350611a9e818560208601611a35565b611aa781611a68565b840191505092915050565b60006020820190508181036000830152611acc8184611a79565b905092915050565b60008115159050919050565b611ae981611ad4565b82525050565b6000602082019050611b046000830184611ae0565b92915050565b6000819050919050565b611b1d81611b0a565b82525050565b6000602082019050611b386000830184611b14565b92915050565b611b4781611b0a565b8114611b5257600080fd5b50565b600081359050611b6481611b3e565b92915050565b611b7381611ad4565b8114611b7e57600080fd5b50565b600081359050611b9081611b6a565b92915050565b600080600060608486031215611baf57611bae611989565b5b6000611bbd86828701611b55565b9350506020611bce86828701611b55565b9250506040611bdf86828701611b81565b9150509250925092565b611bf281611b0a565b82525050565b611c0181611ad4565b82525050565b608082016000820151611c1d6000850182611be9565b506020820151611c306020850182611be9565b506040820151611c436040850182611be9565b506060820151611c566060850182611bf8565b50505050565b6000608082019050611c716000830184611c07565b92915050565b611c80816119ae565b82525050565b6000602082019050611c9b6000830184611c77565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611cd6816119ae565b82525050565b6000611ce88383611ccd565b60208301905092915050565b6000602082019050919050565b6000611d0c82611ca1565b611d168185611cac565b9350611d2183611cbd565b8060005b83811015611d52578151611d398882611cdc565b9750611d4483611cf4565b925050600181019050611d25565b5085935050505092915050565b60006020820190508181036000830152611d798184611d01565b905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611db7601f83611a24565b9150611dc282611d81565b602082019050919050565b60006020820190508181036000830152611de681611daa565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e23602083611a24565b9150611e2e82611ded565b602082019050919050565b60006020820190508181036000830152611e5281611e16565b9050919050565b7f21696e76616c6964000000000000000000000000000000000000000000000000600082015250565b6000611e8f600883611a24565b9150611e9a82611e59565b602082019050919050565b60006020820190508181036000830152611ebe81611e82565b9050919050565b600081519050611ed481611b3e565b92915050565b600060208284031215611ef057611eef611989565b5b6000611efe84828501611ec5565b91505092915050565b7f2162616c616e6365000000000000000000000000000000000000000000000000600082015250565b6000611f3d600883611a24565b9150611f4882611f07565b602082019050919050565b60006020820190508181036000830152611f6c81611f30565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611fba57607f821691505b60208210811415611fce57611fcd611f73565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061200e82611b0a565b915061201983611b0a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561204e5761204d611fd4565b5b828201905092915050565b600061206482611b0a565b915061206f83611b0a565b92508282101561208257612081611fd4565b5b828203905092915050565b7f6e756c6c00000000000000000000000000000000000000000000000000000000600082015250565b60006120c3600483611a24565b91506120ce8261208d565b602082019050919050565b600060208201905081810360008301526120f2816120b6565b9050919050565b7f3e32207965617273000000000000000000000000000000000000000000000000600082015250565b600061212f600883611a24565b915061213a826120f9565b602082019050919050565b6000602082019050818103600083015261215e81612122565b9050919050565b600061217082611b0a565b915061217b83611b0a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121b4576121b3611fd4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121f982611b0a565b915061220483611b0a565b925082612214576122136121bf565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061227b602683611a24565b91506122868261221f565b604082019050919050565b600060208201905081810360008301526122aa8161226e565b9050919050565b60006040820190506122c66000830185611c77565b6122d36020830184611b14565b9392505050565b60006060820190506122ef6000830186611c77565b6122fc6020830185611c77565b6123096040830184611b14565b949350505050565b60008151905061232081611b6a565b92915050565b60006020828403121561233c5761233b611989565b5b600061234a84828501612311565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006123af602a83611a24565b91506123ba82612353565b604082019050919050565b600060208201905081810360008301526123de816123a2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612441602683611a24565b915061244c826123e5565b604082019050919050565b6000602082019050818103600083015261247081612434565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006124ad601d83611a24565b91506124b882612477565b602082019050919050565b600060208201905081810360008301526124dc816124a0565b9050919050565b600081519050919050565b600081905092915050565b6000612504826124e3565b61250e81856124ee565b935061251e818560208601611a35565b80840191505092915050565b600061253682846124f9565b91508190509291505056fea264697066735822122099eda0ace0fe5ebd535854144fab37cc64100d80d07623121ce85e3ed367370a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063715018a611610097578063e2842d7911610066578063e2842d7914610274578063e313a11314610292578063f2fde38b1461029c578063f8b2cb4f146102b8576100f5565b8063715018a6146102105780638052474d1461021a5780638da5cb5b14610238578063dc07a2ed14610256576100f5565b80633ab1ced1116100d35780633ab1ced114610164578063561b2463146101945780635dd9147c146101b05780636b9db4e6146101e0576100f5565b8063204552b0146100fa5780633045aaf31461011657806330d0050514610134575b600080fd5b610114600480360381019061010f91906119ec565b6102e8565b005b61011e610551565b60405161012b9190611ab2565b60405180910390f35b61014e600480360381019061014991906119ec565b6105df565b60405161015b9190611aef565b60405180910390f35b61017e600480360381019061017991906119ec565b610674565b60405161018b9190611b23565b60405180910390f35b6101ae60048036038101906101a99190611b96565b61072b565b005b6101ca60048036038101906101c591906119ec565b610d50565b6040516101d79190611b23565b60405180910390f35b6101fa60048036038101906101f591906119ec565b610e94565b6040516102079190611c5c565b60405180910390f35b610218610f26565b005b610222610fae565b60405161022f9190611ab2565b60405180910390f35b61024061103c565b60405161024d9190611c86565b60405180910390f35b61025e611066565b60405161026b9190611c86565b60405180910390f35b61027c61108c565b6040516102899190611d5f565b60405180910390f35b61029a61111a565b005b6102b660048036038101906102b191906119ec565b6112fc565b005b6102d260048036038101906102cd91906119ec565b6113f4565b6040516102df9190611b23565b60405180910390f35b6002600054141561032e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032590611dcd565b60405180910390fd5b600260008190555061033e611505565b73ffffffffffffffffffffffffffffffffffffffff1661035c61103c565b73ffffffffffffffffffffffffffffffffffffffff16146103b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a990611e39565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043a90611ea5565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161047e9190611c86565b60206040518083038186803b15801561049657600080fd5b505afa1580156104aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ce9190611eda565b905060008111610513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050a90611f53565b60405180910390fd5b61054561051e61103c565b828473ffffffffffffffffffffffffffffffffffffffff1661150d9092919063ffffffff16565b50600160008190555050565b6004805461055e90611fa2565b80601f016020809104026020016040519081016040528092919081815260200182805461058a90611fa2565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b505050505081565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151915050919050565b600080600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107019190612003565b9050600061070e846113f4565b90506000818361071e9190612059565b9050809350505050919050565b60026000541415610771576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076890611dcd565b60405180910390fd5b600260008190555060008311806107885750600082115b6107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906120d9565b60405180910390fd5b60003390506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600081606001516108c6576006839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108e6565b81602001514210156108e5574282602001516108e29190612059565b90505b5b6303bfc40086826108f79190612003565b1115610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90612145565b60405180910390fd5b84600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016109949190611c86565b60206040518083038186803b1580156109ac57600080fd5b505afa1580156109c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e49190611eda565b1015610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90611f53565b60405180910390fd5b610a74833087600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611593909392919063ffffffff16565b6000600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610ac3856113f4565b905060008183610ad39190612059565b905086610bbe57600960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481610b259190612003565b9050610b748682600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661150d9092919063ffffffff16565b6000600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c15565b80600960008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c0d9190612003565b925050819055505b60008883610c239190612003565b905080600860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610c7161195f565b42816000018181525050858b8260000151610c8c9190612003565b610c969190612003565b81602001818152505081816040018181525050600181606001901515908115158152505080600760008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff02191690831515021790555090505050505050505050506001600081905550505050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050600042905060008183602001511115610e895760006303bfc400846040015185600001518660200151610e0b9190612059565b610e159190612165565b610e1f91906121ee565b9050600084600001518560200151610e379190612059565b600554858760200151610e4a9190612059565b610e549190612165565b610e5e91906121ee565b90506005548183610e6f9190612165565b610e7991906121ee565b83610e849190612003565b925050505b809350505050919050565b610e9c61195f565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b610f2e611505565b73ffffffffffffffffffffffffffffffffffffffff16610f4c61103c565b73ffffffffffffffffffffffffffffffffffffffff1614610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9990611e39565b60405180910390fd5b610fac600061161c565b565b60038054610fbb90611fa2565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe790611fa2565b80156110345780601f1061100957610100808354040283529160200191611034565b820191906000526020600020905b81548152906001019060200180831161101757829003601f168201915b505050505081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600680548060200260200160405190810160405280929190818152602001828054801561111057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116110c6575b5050505050905090565b60026000541415611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115790611dcd565b60405180910390fd5b600260008190555060003390506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111f99190612003565b90506000611206836113f4565b9050600081836112169190612059565b90506112658482600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661150d9092919063ffffffff16565b81600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050506001600081905550565b611304611505565b73ffffffffffffffffffffffffffffffffffffffff1661132261103c565b73ffffffffffffffffffffffffffffffffffffffff1614611378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136f90611e39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113df90612291565b60405180910390fd5b6113f18161161c565b50565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506000429050600081836020015111156114fa576000836000015184602001516114a59190612059565b6005548486602001516114b89190612059565b6114c29190612165565b6114cc91906121ee565b90506005548185604001516114e19190612165565b6114eb91906121ee565b826114f69190612003565b9150505b809350505050919050565b600033905090565b61158e8363a9059cbb60e01b848460405160240161152c9291906122b1565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116e2565b505050565b611616846323b872dd60e01b8585856040516024016115b4939291906122da565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506116e2565b50505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611744826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117a99092919063ffffffff16565b90506000815111156117a457808060200190518101906117649190612326565b6117a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179a906123c5565b60405180910390fd5b5b505050565b60606117b884846000856117c1565b90509392505050565b606082471015611806576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117fd90612457565b60405180910390fd5b61180f856118d5565b61184e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611845906124c3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611877919061252a565b60006040518083038185875af1925050503d80600081146118b4576040519150601f19603f3d011682016040523d82523d6000602084013e6118b9565b606091505b50915091506118c98282866118f8565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6060831561190857829050611958565b60008351111561191b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194f9190611ab2565b60405180910390fd5b9392505050565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119b98261198e565b9050919050565b6119c9816119ae565b81146119d457600080fd5b50565b6000813590506119e6816119c0565b92915050565b600060208284031215611a0257611a01611989565b5b6000611a10848285016119d7565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611a53578082015181840152602081019050611a38565b83811115611a62576000848401525b50505050565b6000601f19601f8301169050919050565b6000611a8482611a19565b611a8e8185611a24565b9350611a9e818560208601611a35565b611aa781611a68565b840191505092915050565b60006020820190508181036000830152611acc8184611a79565b905092915050565b60008115159050919050565b611ae981611ad4565b82525050565b6000602082019050611b046000830184611ae0565b92915050565b6000819050919050565b611b1d81611b0a565b82525050565b6000602082019050611b386000830184611b14565b92915050565b611b4781611b0a565b8114611b5257600080fd5b50565b600081359050611b6481611b3e565b92915050565b611b7381611ad4565b8114611b7e57600080fd5b50565b600081359050611b9081611b6a565b92915050565b600080600060608486031215611baf57611bae611989565b5b6000611bbd86828701611b55565b9350506020611bce86828701611b55565b9250506040611bdf86828701611b81565b9150509250925092565b611bf281611b0a565b82525050565b611c0181611ad4565b82525050565b608082016000820151611c1d6000850182611be9565b506020820151611c306020850182611be9565b506040820151611c436040850182611be9565b506060820151611c566060850182611bf8565b50505050565b6000608082019050611c716000830184611c07565b92915050565b611c80816119ae565b82525050565b6000602082019050611c9b6000830184611c77565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611cd6816119ae565b82525050565b6000611ce88383611ccd565b60208301905092915050565b6000602082019050919050565b6000611d0c82611ca1565b611d168185611cac565b9350611d2183611cbd565b8060005b83811015611d52578151611d398882611cdc565b9750611d4483611cf4565b925050600181019050611d25565b5085935050505092915050565b60006020820190508181036000830152611d798184611d01565b905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611db7601f83611a24565b9150611dc282611d81565b602082019050919050565b60006020820190508181036000830152611de681611daa565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611e23602083611a24565b9150611e2e82611ded565b602082019050919050565b60006020820190508181036000830152611e5281611e16565b9050919050565b7f21696e76616c6964000000000000000000000000000000000000000000000000600082015250565b6000611e8f600883611a24565b9150611e9a82611e59565b602082019050919050565b60006020820190508181036000830152611ebe81611e82565b9050919050565b600081519050611ed481611b3e565b92915050565b600060208284031215611ef057611eef611989565b5b6000611efe84828501611ec5565b91505092915050565b7f2162616c616e6365000000000000000000000000000000000000000000000000600082015250565b6000611f3d600883611a24565b9150611f4882611f07565b602082019050919050565b60006020820190508181036000830152611f6c81611f30565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611fba57607f821691505b60208210811415611fce57611fcd611f73565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061200e82611b0a565b915061201983611b0a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561204e5761204d611fd4565b5b828201905092915050565b600061206482611b0a565b915061206f83611b0a565b92508282101561208257612081611fd4565b5b828203905092915050565b7f6e756c6c00000000000000000000000000000000000000000000000000000000600082015250565b60006120c3600483611a24565b91506120ce8261208d565b602082019050919050565b600060208201905081810360008301526120f2816120b6565b9050919050565b7f3e32207965617273000000000000000000000000000000000000000000000000600082015250565b600061212f600883611a24565b915061213a826120f9565b602082019050919050565b6000602082019050818103600083015261215e81612122565b9050919050565b600061217082611b0a565b915061217b83611b0a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156121b4576121b3611fd4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121f982611b0a565b915061220483611b0a565b925082612214576122136121bf565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061227b602683611a24565b91506122868261221f565b604082019050919050565b600060208201905081810360008301526122aa8161226e565b9050919050565b60006040820190506122c66000830185611c77565b6122d36020830184611b14565b9392505050565b60006060820190506122ef6000830186611c77565b6122fc6020830185611c77565b6123096040830184611b14565b949350505050565b60008151905061232081611b6a565b92915050565b60006020828403121561233c5761233b611989565b5b600061234a84828501612311565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006123af602a83611a24565b91506123ba82612353565b604082019050919050565b600060208201905081810360008301526123de816123a2565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612441602683611a24565b915061244c826123e5565b604082019050919050565b6000602082019050818103600083015261247081612434565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006124ad601d83611a24565b91506124b882612477565b602082019050919050565b600060208201905081810360008301526124dc816124a0565b9050919050565b600081519050919050565b600081905092915050565b6000612504826124e3565b61250e81856124ee565b935061251e818560208601611a35565b80840191505092915050565b600061253682846124f9565b91508190509291505056fea264697066735822122099eda0ace0fe5ebd535854144fab37cc64100d80d07623121ce85e3ed367370a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimMyFunds()": {
        "details": "This will need to be called by the web application via a button or some other means"
      },
      "constructor": {
        "params": {
          "_governance": "Address of wallet which will be given adminstrative access to this contract",
          "_name": "Desired name of our governance token",
          "_stakedToken": "Address of the token our users will deposit and lock in exchange for governance tokens",
          "_symbol": "Desired symbol of our governance token"
        }
      },
      "getAllUsers()": {
        "returns": {
          "_0": "An array of addresses of all users who have ever staked"
        }
      },
      "getBalance(address)": {
        "params": {
          "_userAddr": "Address of any user to view the number of tokens they still have locked"
        },
        "returns": {
          "_0": "Quantity of tokens the user has locked"
        }
      },
      "getLock(address)": {
        "details": "This may be used by the web application for graphical illustration purposes",
        "params": {
          "_userAddr": "Address of any user to view all Locks they have ever created"
        },
        "returns": {
          "_0": "Users Lock in the format of the LockVe struct"
        }
      },
      "getPower(address)": {
        "params": {
          "_userAddr": "Address of any user to view the number of governance tokens currently awarded to them"
        },
        "returns": {
          "_0": "Quantity of governance tokens allocated to the user"
        }
      },
      "getUnclaimed(address)": {
        "params": {
          "_userAddr": "Address of any user to view the number of vested tokens they have not yet claimed"
        },
        "returns": {
          "_0": "Quantity of tokens which have vested but are unclaimed by the specified user"
        }
      },
      "isUserLocked(address)": {
        "details": "This may be used by the web application to determine if the UI says \"Create Lock\" or \"Add to Lock\"",
        "params": {
          "_userAddr": "Address of any user to check"
        },
        "returns": {
          "_0": "True if the user has ever created a lock"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerRemoveNonDepositToken(address)": {
        "params": {
          "_token": "Address of the non-deposit token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256,uint256,bool)": {
        "params": {
          "_amount": "Number of additional tokens to deposit into the lock",
          "_deferUnclaimed": "If True, leaves any unclaimed vested balance in the staking contract",
          "_duration": "Number of seconds the invoking user will extend their lock for"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimMyFunds()": {
        "notice": "Transfers deposit tokens which have decayed over some portion of the lock period back to their original ownerIt is up to the user to invoke this in order to reclaim their original deposit tokens over time"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "getAllUsers()": {
        "notice": "Retrieve a list of all users who have ever staked"
      },
      "getBalance(address)": {
        "notice": "Calculate the number of tokens a user still has locked, see also: getMyBalance()"
      },
      "getLock(address)": {
        "notice": "View a users Lock, see also GetMyLock()"
      },
      "getPower(address)": {
        "notice": "Calculate the number of governance tokens allocated to a user by this contract, see also: getMyPower()"
      },
      "getUnclaimed(address)": {
        "notice": "Calculate the number of vested tokens a user has not claimed, see also: getMyUnclaimed()"
      },
      "isUserLocked(address)": {
        "notice": "Check if a user has ever created a Lock in this contract"
      },
      "ownerRemoveNonDepositToken(address)": {
        "notice": "Allow owner to reclaim tokens not matching the deposit tokenSome users may have accidentally sent these to the contract"
      },
      "stake(uint256,uint256,bool)": {
        "notice": "Create/extend the duration of the invoking users lock and/or deposit additional tokens into it"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 779,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "StakedToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 781,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "Name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 783,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "Symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 786,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "InterpolationGranularity",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 789,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "Users",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 794,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "Locks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(LockVe)811_storage)"
      },
      {
        "astId": 798,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "LockedFunds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 802,
        "contract": "contracts/StakingVe.sol:StakingVe",
        "label": "DeferredFunds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(LockVe)811_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingVe.LockVe)",
        "numberOfBytes": "32",
        "value": "t_struct(LockVe)811_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockVe)811_storage": {
        "encoding": "inplace",
        "label": "struct StakingVe.LockVe",
        "members": [
          {
            "astId": 804,
            "contract": "contracts/StakingVe.sol:StakingVe",
            "label": "StartBlockTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 806,
            "contract": "contracts/StakingVe.sol:StakingVe",
            "label": "EndBlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 808,
            "contract": "contracts/StakingVe.sol:StakingVe",
            "label": "StartingAmountLocked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 810,
            "contract": "contracts/StakingVe.sol:StakingVe",
            "label": "Initialized",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}