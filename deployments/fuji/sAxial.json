{
  "address": "0xb7819A8714fCa85239E4b881291819A79Aa703E4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "userClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "userExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "userStaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMyFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getLock",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startBlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endBlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingAmountLocked",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct VestingStake.LockVe",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getUnclaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "isUserLocked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "ownerRemoveNonDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_deferUnclaimed",
          "type": "bool"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe7c16ce30630cd4fd1151efd3160d6629af64f726350448fec3cfe49677a3791",
  "receipt": {
    "to": null,
    "from": "0x44A4b9E2A69d86BA382a511f845CbF2E31286770",
    "contractAddress": "0xb7819A8714fCa85239E4b881291819A79Aa703E4",
    "transactionIndex": 0,
    "gasUsed": "1387348",
    "logsBloom": "0x
    "blockHash": "0x79138c8c78f6c13b38595a89b7725579e70341f79a919b06b867a98a58db7817",
    "transactionHash": "0xe7c16ce30630cd4fd1151efd3160d6629af64f726350448fec3cfe49677a3791",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8293088,
        "transactionHash": "0xe7c16ce30630cd4fd1151efd3160d6629af64f726350448fec3cfe49677a3791",
        "address": "0xb7819A8714fCa85239E4b881291819A79Aa703E4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x79138c8c78f6c13b38595a89b7725579e70341f79a919b06b867a98a58db7817"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8293088,
        "transactionHash": "0xe7c16ce30630cd4fd1151efd3160d6629af64f726350448fec3cfe49677a3791",
        "address": "0xb7819A8714fCa85239E4b881291819A79Aa703E4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x79138c8c78f6c13b38595a89b7725579e70341f79a919b06b867a98a58db7817"
      }
    ],
    "blockNumber": 8293088,
    "cumulativeGasUsed": "1387348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0708F10F657b16ABE18954361E96a641b217648B",
    "sAxial",
    "sAXIAL",
    "0x44A4b9E2A69d86BA382a511f845CbF2E31286770"
  ],
  "numDeployments": 4,
  "solcInputHash": "aac5fb64af3cecab76acb3752fef48c8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"userExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"userStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMyFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingAmountLocked\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct VestingStake.LockVe\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"isUserLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ownerRemoveNonDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_deferUnclaimed\",\"type\":\"bool\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"userClaimed(address,uint256)\":{\"params\":{\"amount\":\"Quantity of tokens claimed\",\"user\":\"Address of the user who claimed\"}},\"userExtended(address,uint256,uint256)\":{\"params\":{\"amount\":\"New total quantity of tokens in stake\",\"duration\":\"New total length of stake\",\"user\":\"Address of the user who staked\"}},\"userStaked(address,uint256,uint256)\":{\"params\":{\"amount\":\"Quantity of tokens staked\",\"duration\":\"Length in seconds of stake\",\"user\":\"Address of the user who staked\"}}},\"kind\":\"dev\",\"methods\":{\"claimMyFunds()\":{\"details\":\"This will need to be called by the web application via a button or some other means\"},\"constructor\":{\"params\":{\"_governance\":\"Address of wallet which will be given adminstrative access to this contract\",\"_name\":\"Desired name of our governance token\",\"_stakedToken\":\"Address of the token our users will deposit and lock in exchange for governance tokens\",\"_symbol\":\"Desired symbol of our governance token\"}},\"getAllUsers()\":{\"returns\":{\"_0\":\"An array of addresses of all users who have ever staked\"}},\"getBalance(address)\":{\"params\":{\"_userAddr\":\"Address of any user to view the number of tokens they still have locked\"},\"returns\":{\"_0\":\"Quantity of tokens the user has locked\"}},\"getLock(address)\":{\"details\":\"This may be used by the web application for graphical illustration purposes\",\"params\":{\"_userAddr\":\"Address of any user to view all Locks they have ever created\"},\"returns\":{\"_0\":\"Users Lock in the format of the LockVe struct\"}},\"getPower(address)\":{\"params\":{\"_userAddr\":\"Address of any user to view the number of governance tokens currently awarded to them\"},\"returns\":{\"_0\":\"Quantity of governance tokens allocated to the user\"}},\"getUnclaimed(address)\":{\"params\":{\"_userAddr\":\"Address of any user to view the number of vested tokens they have not yet claimed\"},\"returns\":{\"_0\":\"Quantity of tokens which have vested but are unclaimed by the specified user\"}},\"isUserLocked(address)\":{\"details\":\"This may be used by the web application to determine if the UI says \\\"Create Lock\\\" or \\\"Add to Lock\\\"\",\"params\":{\"_userAddr\":\"Address of any user to check\"},\"returns\":{\"_0\":\"True if the user has ever created a lock\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerRemoveNonDepositToken(address)\":{\"details\":\"Always ensure the _token is legitimate before calling thisA bad token can mimic safetransfer or balanceof with a nocive function\",\"params\":{\"_token\":\"Address of the non-deposit token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256,uint256,bool)\":{\"params\":{\"_amount\":\"Number of additional tokens to deposit into the lock\",\"_deferUnclaimed\":\"If True, leaves any unclaimed vested balance in the staking contract\",\"_duration\":\"Number of seconds the invoking user will extend their lock for\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"userClaimed(address,uint256)\":{\"notice\":\"Emitted when a user claims outstanding vested balance\"},\"userExtended(address,uint256,uint256)\":{\"notice\":\"Emitted when a user extends and/or deposits into their existing stake\"},\"userStaked(address,uint256,uint256)\":{\"notice\":\"Emitted when a user stakes for the first time\"}},\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"This is an overload for getPower so that users can see the 'token' in their wallets\"},\"claimMyFunds()\":{\"notice\":\"Transfers vested tokens back to their original ownerIt is up to the user to invoke this manually\"},\"constructor\":{\"notice\":\"Constructor\"},\"getAllUsers()\":{\"notice\":\"Retrieve a list of all users who have ever staked\"},\"getBalance(address)\":{\"notice\":\"Calculate the number of tokens a user still has locked\"},\"getLock(address)\":{\"notice\":\"View a users Lock\"},\"getPower(address)\":{\"notice\":\"Calculate the number of governance tokens currently allocated to a user by this contract\"},\"getUnclaimed(address)\":{\"notice\":\"Calculate the number of vested tokens a user has not claimed\"},\"isUserLocked(address)\":{\"notice\":\"Check if a user has ever created a Lock in this contract\"},\"ownerRemoveNonDepositToken(address)\":{\"notice\":\"Allow owner to reclaim tokens not matching the deposit tokenSome users may have accidentally sent these to the contract\"},\"stake(uint256,uint256,bool)\":{\"notice\":\"Create/extend the duration of the invoking users lock and/or deposit additional tokens into it\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VestingStake.sol\":\"VestingStake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VestingStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title A vesting style staking contract with extendable linear decay\\n/// @author Auroter\\n/// @notice Allows you to lock tokens in exchange for governance tokens\\n/// @notice Locks can be extended or deposited into\\n/// @notice Maximum deposit duration is two years (104 weeks)\\n/// @dev Simply call stake(...) to create initial lock or extend one that already exists for the user\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract VestingStake is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Info pertaining to staking contract\\n    address public stakedToken; // An ERC20 Token to be staked (i.e. Axial)\\n    string public name; // New asset after staking (i.e. sAxial)\\n    string public symbol; // New asset symbol after staking (i.e. sAXIAL)\\n    uint256 private interpolationGranularity = 1e18; // Note: ERC20.decimals() is for display and does not affect arithmetic!\\n\\n    // Info pertaining to users\\n    address[] private users; // An array containing all user addresses\\n    mapping(address => LockVe) private locks; // A mapping of each users lock\\n    mapping(address => uint256) private lockedFunds; // A mapping of each users total deposited funds\\n    mapping(address => uint256) private deferredFunds; // A mapping of vested funds the user wishes to leave unclaimed\\n\\n    // Lock structure, only one of these is allowed per user\\n    // A DELTA can be derived as the degree of interpolation between the start/end block:\\n    // Delta = (end - now) / end - start\\n    // This can be used to determine how much of our staked token is unlocked:\\n    // currentAmountLocked = startingAmountLocked - (delta * startingAmountLocked)\\n    struct LockVe {\\n        uint256 startBlockTime;\\n        uint256 endBlockTime;\\n        uint256 startingAmountLocked;\\n        bool initialized;\\n    }\\n\\n    /// @notice Constructor\\n    /// @param _stakedToken Address of the token our users will deposit and lock in exchange for governance tokens\\n    /// @param _name Desired name of our governance token\\n    /// @param _symbol Desired symbol of our governance token\\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\\n    constructor(\\n        address _stakedToken,\\n        string memory _name,\\n        string memory _symbol,\\n        address _governance\\n    ) {\\n        transferOwnership(_governance);\\n        stakedToken = _stakedToken;\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /// @notice Emitted when a user stakes for the first time\\n    /// @param user Address of the user who staked\\n    /// @param amount Quantity of tokens staked\\n    /// @param duration Length in seconds of stake\\n    event userStaked(address indexed user, uint256 amount, uint256 duration);\\n\\n    /// @notice Emitted when a user extends and/or deposits into their existing stake\\n    /// @param user Address of the user who staked\\n    /// @param amount New total quantity of tokens in stake\\n    /// @param duration New total length of stake\\n    event userExtended(address indexed user, uint256 amount, uint256 duration);\\n\\n    /// @notice Emitted when a user claims outstanding vested balance\\n    /// @param user Address of the user who claimed\\n    /// @param amount Quantity of tokens claimed\\n    event userClaimed(address indexed user, uint256 amount);\\n\\n    /// @notice Calculate the number of vested tokens a user has not claimed\\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\\n    /// @return Quantity of tokens which have vested but are unclaimed by the specified user\\n    function getUnclaimed(address _userAddr) public view returns (uint256) {\\n        uint256 totalFundsDeposited = lockedFunds[_userAddr] + deferredFunds[_userAddr];\\n        uint256 currentBalance = getBalance(_userAddr);\\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\\n        return fundsToClaim;\\n    }\\n\\n    /// @notice Calculate the number of tokens a user still has locked\\n    /// @param _userAddr Address of any user to view the number of tokens they still have locked\\n    /// @return Quantity of tokens the user has locked\\n    function getBalance(address _userAddr) public view returns (uint256) {\\n        LockVe memory usersLock = locks[_userAddr];\\n\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 balance = 0;\\n\\n        if (usersLock.endBlockTime > currentTimestamp) {\\n            uint256 granularDelta = ((usersLock.endBlockTime - currentTimestamp) * interpolationGranularity) / (usersLock.endBlockTime - usersLock.startBlockTime);\\n            balance += (usersLock.startingAmountLocked * granularDelta) / interpolationGranularity;\\n        }\\n        return balance;\\n    }\\n\\n    /// @notice This is an overload for getPower so that users can see the 'token' in their wallets\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return getPower(_account);\\n    }\\n\\n    /// @notice Calculate the number of governance tokens currently allocated to a user by this contract\\n    /// @param _userAddr Address of any user to view the number of governance tokens currently awarded to them\\n    /// @return Quantity of governance tokens allocated to the user\\n    function getPower(address _userAddr) public view returns (uint256) {\\n        LockVe memory usersLock = locks[_userAddr];\\n\\n        uint256 currentTimestamp = block.timestamp;\\n        uint256 power = 0;\\n\\n        if (usersLock.endBlockTime > currentTimestamp) {\\n            // let delta = elapsed / totalLocktinme\\n            // let startingPower = duration / 2 years\\n            // let power = delta * startingPower\\n            uint256 startingAmountAwarded = ((usersLock.endBlockTime - usersLock.startBlockTime) * usersLock.startingAmountLocked) / 104 weeks;\\n            uint256 granularDelta = ((usersLock.endBlockTime - currentTimestamp) * interpolationGranularity) / (usersLock.endBlockTime - usersLock.startBlockTime);\\n            power += (startingAmountAwarded * granularDelta) / interpolationGranularity;\\n        }\\n        return power;\\n    }\\n\\n    /// @notice Retrieve a list of all users who have ever staked\\n    /// @return An array of addresses of all users who have ever staked\\n    function getAllUsers() public view returns (address[] memory) {\\n        return users;\\n    }\\n\\n    /// @notice Check if a user has ever created a Lock in this contract\\n    /// @param _userAddr Address of any user to check\\n    /// @dev This may be used by the web application to determine if the UI says \\\"Create Lock\\\" or \\\"Add to Lock\\\"\\n    /// @return True if the user has ever created a lock\\n    function isUserLocked(address _userAddr) public view returns (bool) {\\n        LockVe memory usersLock = locks[_userAddr];\\n        return usersLock.initialized;\\n    }\\n\\n    /// @notice View a users Lock\\n    /// @param _userAddr Address of any user to view all Locks they have ever created\\n    /// @dev This may be used by the web application for graphical illustration purposes\\n    /// @return Users Lock in the format of the LockVe struct\\n    function getLock(address _userAddr) public view returns (LockVe memory) {\\n        return locks[_userAddr];\\n    }\\n\\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\\n    /// @notice Some users may have accidentally sent these to the contract\\n    /// @param _token Address of the non-deposit token\\n    /// @dev Always ensure the _token is legitimate before calling this\\n    /// @dev A bad token can mimic safetransfer or balanceof with a nocive function\\n    function ownerRemoveNonDepositToken(address _token) public nonReentrant onlyOwner {\\n        require(_token != stakedToken, \\\"!invalid\\\");\\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\\n        require(balanceOfToken > 0, \\\"!balance\\\");\\n        IERC20(_token).safeTransfer(owner(), balanceOfToken);\\n    }\\n\\n    /// @notice Transfers vested tokens back to their original owner\\n    /// @notice It is up to the user to invoke this manually\\n    /// @dev This will need to be called by the web application via a button or some other means\\n    function claimMyFunds() external nonReentrant {\\n        address userAddr = msg.sender;\\n        uint256 totalFundsDeposited = lockedFunds[userAddr] + deferredFunds[userAddr];\\n        uint256 currentBalance = getBalance(userAddr);\\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\\n\\n        IERC20(stakedToken).safeTransfer(userAddr, fundsToClaim);\\n\\n        lockedFunds[userAddr] = currentBalance;\\n        deferredFunds[userAddr] = 0;\\n\\n        emit userClaimed(userAddr, fundsToClaim);\\n    }\\n\\n    /// @notice Create/extend the duration of the invoking users lock and/or deposit additional tokens into it\\n    /// @param _duration Number of seconds the invoking user will extend their lock for\\n    /// @param _amount Number of additional tokens to deposit into the lock\\n    /// @param _deferUnclaimed If True, leaves any unclaimed vested balance in the staking contract\\n    function stake(uint256 _duration, uint256 _amount, bool _deferUnclaimed) public nonReentrant {\\n        require(_duration > 0 || _amount > 0, \\\"null\\\");\\n\\n        // Retrieve lock the user may have already created\\n        address userAddr = msg.sender;\\n        LockVe memory usersLock = locks[userAddr];\\n\\n        uint256 oldDurationRemaining = 0;\\n\\n        // Keep track of new user or pre-existing lockout period\\n        if (!usersLock.initialized) {\\n            users.push(userAddr);\\n        } else if (block.timestamp < usersLock.endBlockTime) {\\n            oldDurationRemaining = usersLock.endBlockTime - block.timestamp;\\n        }\\n\\n        require (oldDurationRemaining + _duration <= 104 weeks, \\\">2 years\\\");\\n\\n        // Receive the users tokens\\n        require(IERC20(stakedToken).balanceOf(userAddr) >= _amount, \\\"!balance\\\");\\n        require(IERC20(stakedToken).allowance(userAddr, address(this)) >= _amount, \\\"!approved\\\");\\n        IERC20(stakedToken).safeTransferFrom(userAddr,  address(this), _amount);\\n\\n        // Account for balance / unclaimed funds\\n        uint256 totalFundsDeposited = lockedFunds[userAddr];\\n        uint256 oldBalance = getBalance(userAddr);\\n        uint256 fundsUnclaimed = totalFundsDeposited - oldBalance;\\n        if (!_deferUnclaimed) {\\n            fundsUnclaimed += deferredFunds[userAddr];\\n            IERC20(stakedToken).safeTransfer(userAddr, fundsUnclaimed);\\n            deferredFunds[userAddr] = 0;\\n            emit userClaimed(userAddr, fundsUnclaimed);\\n        } else {\\n            deferredFunds[userAddr] += fundsUnclaimed;\\n        }\\n        uint256 newTotalDeposit = oldBalance + _amount;\\n\\n        // Update balance\\n        lockedFunds[userAddr] = newTotalDeposit;\\n\\n        // Fill out updated LockVe struct\\n        LockVe memory newLock;\\n        newLock.startBlockTime = block.timestamp;\\n        newLock.endBlockTime = newLock.startBlockTime + _duration + oldDurationRemaining;\\n        newLock.startingAmountLocked = newTotalDeposit;\\n        newLock.initialized = true;\\n        locks[userAddr] = newLock;\\n\\n        // Events\\n        if (oldDurationRemaining == 0) {\\n            emit userStaked(userAddr, newTotalDeposit, newLock.endBlockTime - newLock.startBlockTime);\\n        } else {\\n            emit userExtended(userAddr, newTotalDeposit, newLock.endBlockTime - newLock.startBlockTime);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc30f7f3a9bf16fe636e39a0328314299b87ad6420b36e5536fa80d25a0c13234\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063e2842d7911610066578063e2842d7914610295578063e313a113146102aa578063f2fde38b146102b2578063f8b2cb4f146102c557600080fd5b8063715018a61461024d5780638da5cb5b1461025557806395d89b411461027a578063cc7a262e1461028257600080fd5b8063561b2463116100d3578063561b2463146101cc5780635dd9147c146101df5780636b9db4e6146101f257806370a082311461023a57600080fd5b806306fdde0314610105578063204552b01461012357806330d00505146101385780633ab1ced1146101ab575b600080fd5b61010d6102d8565b60405161011a91906112a9565b60405180910390f35b6101366101313660046112dc565b610366565b005b61019b6101463660046112dc565b6001600160a01b031660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606090910181905290565b604051901515815260200161011a565b6101be6101b93660046112dc565b6104f0565b60405190815260200161011a565b6101366101da366004611313565b610543565b6101be6101ed3660046112dc565b610ac5565b6102056102003660046112dc565b610bc1565b60405161011a919081518152602080830151908201526040808301519082015260609182015115159181019190915260800190565b6101be6102483660046112dc565b610c41565b610136610c52565b6001546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b61010d610c88565b600254610262906001600160a01b031681565b61029d610c95565b60405161011a919061134c565b610136610cf7565b6101366102c03660046112dc565b610de0565b6101be6102d33660046112dc565b610e7b565b600380546102e590611399565b80601f016020809104026020016040519081016040528092919081815260200182805461031190611399565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b505050505081565b600260005414156103925760405162461bcd60e51b8152600401610389906113d4565b60405180910390fd5b60026000556001546001600160a01b031633146103c15760405162461bcd60e51b81526004016103899061140b565b6002546001600160a01b038281169116141561040a5760405162461bcd60e51b8152602060048201526008602482015267085a5b9d985b1a5960c21b6044820152606401610389565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561044c57600080fd5b505afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190611440565b9050600081116104c15760405162461bcd60e51b81526020600482015260086024820152672162616c616e636560c01b6044820152606401610389565b6104e76104d66001546001600160a01b031690565b6001600160a01b0384169083610f40565b50506001600055565b6001600160a01b0381166000908152600960209081526040808320546008909252822054829161051f9161146f565b9050600061052c84610e7b565b9050600061053a8284611487565b95945050505050565b600260005414156105665760405162461bcd60e51b8152600401610389906113d4565b6002600055821515806105795750600082115b6105ae5760405162461bcd60e51b8152600401610389906020808252600490820152631b9d5b1b60e21b604082015260600190565b3360008181526007602090815260408083208151608081018352815481526001820154938101939093526002810154918301919091526003015460ff1615156060820181905290919061064b57600680546001810182556000919091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b03851617905561066a565b816020015142101561066a574282602001516106679190611487565b90505b6303bfc400610679878361146f565b11156106b25760405162461bcd60e51b81526020600482015260086024820152673e3220796561727360c01b6044820152606401610389565b6002546040516370a0823160e01b81526001600160a01b038581166004830152879216906370a082319060240160206040518083038186803b1580156106f757600080fd5b505afa15801561070b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072f9190611440565b10156107685760405162461bcd60e51b81526020600482015260086024820152672162616c616e636560c01b6044820152606401610389565b600254604051636eb1769f60e11b81526001600160a01b0385811660048301523060248301528792169063dd62ed3e9060440160206040518083038186803b1580156107b357600080fd5b505afa1580156107c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107eb9190611440565b10156108255760405162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b6044820152606401610389565b60025461083d906001600160a01b0316843088610fa8565b6001600160a01b0383166000908152600860205260408120549061086085610e7b565b9050600061086e8284611487565b90508661090c576001600160a01b038616600090815260096020526040902054610898908261146f565b6002549091506108b2906001600160a01b03168783610f40565b6001600160a01b03861660008181526009602052604080822091909155517ffcbf8b246b3ac6aa7e8002686cf3d119427dd6d829425af7accd635930643edb906108ff9084815260200190565b60405180910390a261093a565b6001600160a01b0386166000908152600960205260408120805483929061093490849061146f565b90915550505b6000610946898461146f565b6001600160a01b038816600090815260086020908152604080832084905580516080810182529182018390528101829052606081019190915242808252919250908690610994908d9061146f565b61099e919061146f565b602082810191825260408084018581526001606086018181526001600160a01b038e1660009081526007909552929093208551815593519284019290925590516002830155516003909101805460ff191691151591909117905585610a5a57876001600160a01b03167f1835b101ea7447f2acc185724289ae4febae3bfcd360c35fe5e92f998d158e648383600001518460200151610a3d9190611487565b6040805192835260208301919091520160405180910390a2610ab3565b876001600160a01b03167f1283a4a0284d28123a496b22cd97a140ab9f481d8b8b2088e4d2b95fd6a2412e8383600001518460200151610a9a9190611487565b6040805192835260208301919091520160405180910390a25b50506001600055505050505050505050565b6001600160a01b038116600090815260076020908152604080832081516080810183528154815260018201549381018490526002820154928101929092526003015460ff16151560608201529042908390821015610bb95760006303bfc400846040015185600001518660200151610b3d9190611487565b610b47919061149e565b610b5191906114bd565b9050600084600001518560200151610b699190611487565b600554858760200151610b7c9190611487565b610b86919061149e565b610b9091906114bd565b600554909150610ba0828461149e565b610baa91906114bd565b610bb4908461146f565b925050505b949350505050565b610bee60405180608001604052806000815260200160008152602001600081526020016000151581525090565b506001600160a01b031660009081526007602090815260409182902082516080810184528154815260018201549281019290925260028101549282019290925260039091015460ff161515606082015290565b6000610c4c82610ac5565b92915050565b6001546001600160a01b03163314610c7c5760405162461bcd60e51b81526004016103899061140b565b610c866000610fe6565b565b600480546102e590611399565b60606006805480602002602001604051908101604052809291908181526020018280548015610ced57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ccf575b5050505050905090565b60026000541415610d1a5760405162461bcd60e51b8152600401610389906113d4565b6002600090815533808252600960209081526040808420546008909252832054919291610d47919061146f565b90506000610d5483610e7b565b90506000610d628284611487565b600254909150610d7c906001600160a01b03168583610f40565b6001600160a01b0384166000818152600860209081526040808320869055600982528083209290925590518381527ffcbf8b246b3ac6aa7e8002686cf3d119427dd6d829425af7accd635930643edb910160405180910390a2505060016000555050565b6001546001600160a01b03163314610e0a5760405162461bcd60e51b81526004016103899061140b565b6001600160a01b038116610e6f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610389565b610e7881610fe6565b50565b6001600160a01b038116600090815260076020908152604080832081516080810183528154815260018201549381018490526002820154928101929092526003015460ff16151560608201529042908390821015610bb95782516020840151600091610ee691611487565b600554848660200151610ef99190611487565b610f03919061149e565b610f0d91906114bd565b9050600554818560400151610f22919061149e565b610f2c91906114bd565b610f36908361146f565b9695505050505050565b6040516001600160a01b038316602482015260448101829052610fa390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611038565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610fe09085906323b872dd60e01b90608401610f6c565b50505050565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061108d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661110a9092919063ffffffff16565b805190915015610fa357808060200190518101906110ab91906114df565b610fa35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610389565b60606111198484600085611123565b90505b9392505050565b6060824710156111845760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610389565b6001600160a01b0385163b6111db5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610389565b600080866001600160a01b031685876040516111f791906114fc565b60006040518083038185875af1925050503d8060008114611234576040519150601f19603f3d011682016040523d82523d6000602084013e611239565b606091505b5091509150610bb48282866060831561125357508161111c565b8251156112635782518084602001fd5b8160405162461bcd60e51b815260040161038991906112a9565b60005b83811015611298578181015183820152602001611280565b83811115610fe05750506000910152565b60208152600082518060208401526112c881604085016020870161127d565b601f01601f19169190910160400192915050565b6000602082840312156112ee57600080fd5b81356001600160a01b038116811461111c57600080fd5b8015158114610e7857600080fd5b60008060006060848603121561132857600080fd5b8335925060208401359150604084013561134181611305565b809150509250925092565b6020808252825182820181905260009190848201906040850190845b8181101561138d5783516001600160a01b031683529284019291840191600101611368565b50909695505050505050565b600181811c908216806113ad57607f821691505b602082108114156113ce57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561145257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561148257611482611459565b500190565b60008282101561149957611499611459565b500390565b60008160001904831182151516156114b8576114b8611459565b500290565b6000826114da57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156114f157600080fd5b815161111c81611305565b6000825161150e81846020870161127d565b919091019291505056fea2646970667358221220eabb7f09d46693d1897982eff356d7d749ae09d424e68c9a093607d3e7351cba64736f6c63430008090033",
  "devdoc": {
    "events": {
      "userClaimed(address,uint256)": {
        "params": {
          "amount": "Quantity of tokens claimed",
          "user": "Address of the user who claimed"
        }
      },
      "userExtended(address,uint256,uint256)": {
        "params": {
          "amount": "New total quantity of tokens in stake",
          "duration": "New total length of stake",
          "user": "Address of the user who staked"
        }
      },
      "userStaked(address,uint256,uint256)": {
        "params": {
          "amount": "Quantity of tokens staked",
          "duration": "Length in seconds of stake",
          "user": "Address of the user who staked"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "claimMyFunds()": {
        "details": "This will need to be called by the web application via a button or some other means"
      },
      "constructor": {
        "params": {
          "_governance": "Address of wallet which will be given adminstrative access to this contract",
          "_name": "Desired name of our governance token",
          "_stakedToken": "Address of the token our users will deposit and lock in exchange for governance tokens",
          "_symbol": "Desired symbol of our governance token"
        }
      },
      "getAllUsers()": {
        "returns": {
          "_0": "An array of addresses of all users who have ever staked"
        }
      },
      "getBalance(address)": {
        "params": {
          "_userAddr": "Address of any user to view the number of tokens they still have locked"
        },
        "returns": {
          "_0": "Quantity of tokens the user has locked"
        }
      },
      "getLock(address)": {
        "details": "This may be used by the web application for graphical illustration purposes",
        "params": {
          "_userAddr": "Address of any user to view all Locks they have ever created"
        },
        "returns": {
          "_0": "Users Lock in the format of the LockVe struct"
        }
      },
      "getPower(address)": {
        "params": {
          "_userAddr": "Address of any user to view the number of governance tokens currently awarded to them"
        },
        "returns": {
          "_0": "Quantity of governance tokens allocated to the user"
        }
      },
      "getUnclaimed(address)": {
        "params": {
          "_userAddr": "Address of any user to view the number of vested tokens they have not yet claimed"
        },
        "returns": {
          "_0": "Quantity of tokens which have vested but are unclaimed by the specified user"
        }
      },
      "isUserLocked(address)": {
        "details": "This may be used by the web application to determine if the UI says \"Create Lock\" or \"Add to Lock\"",
        "params": {
          "_userAddr": "Address of any user to check"
        },
        "returns": {
          "_0": "True if the user has ever created a lock"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerRemoveNonDepositToken(address)": {
        "details": "Always ensure the _token is legitimate before calling thisA bad token can mimic safetransfer or balanceof with a nocive function",
        "params": {
          "_token": "Address of the non-deposit token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256,uint256,bool)": {
        "params": {
          "_amount": "Number of additional tokens to deposit into the lock",
          "_deferUnclaimed": "If True, leaves any unclaimed vested balance in the staking contract",
          "_duration": "Number of seconds the invoking user will extend their lock for"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "userClaimed(address,uint256)": {
        "notice": "Emitted when a user claims outstanding vested balance"
      },
      "userExtended(address,uint256,uint256)": {
        "notice": "Emitted when a user extends and/or deposits into their existing stake"
      },
      "userStaked(address,uint256,uint256)": {
        "notice": "Emitted when a user stakes for the first time"
      }
    },
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "This is an overload for getPower so that users can see the 'token' in their wallets"
      },
      "claimMyFunds()": {
        "notice": "Transfers vested tokens back to their original ownerIt is up to the user to invoke this manually"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "getAllUsers()": {
        "notice": "Retrieve a list of all users who have ever staked"
      },
      "getBalance(address)": {
        "notice": "Calculate the number of tokens a user still has locked"
      },
      "getLock(address)": {
        "notice": "View a users Lock"
      },
      "getPower(address)": {
        "notice": "Calculate the number of governance tokens currently allocated to a user by this contract"
      },
      "getUnclaimed(address)": {
        "notice": "Calculate the number of vested tokens a user has not claimed"
      },
      "isUserLocked(address)": {
        "notice": "Check if a user has ever created a Lock in this contract"
      },
      "ownerRemoveNonDepositToken(address)": {
        "notice": "Allow owner to reclaim tokens not matching the deposit tokenSome users may have accidentally sent these to the contract"
      },
      "stake(uint256,uint256,bool)": {
        "notice": "Create/extend the duration of the invoking users lock and/or deposit additional tokens into it"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5624,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "stakedToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5626,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 5628,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 5631,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "interpolationGranularity",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5634,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "users",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5639,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "locks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(LockVe)5656_storage)"
      },
      {
        "astId": 5643,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "lockedFunds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5647,
        "contract": "contracts/VestingStake.sol:VestingStake",
        "label": "deferredFunds",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(LockVe)5656_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VestingStake.LockVe)",
        "numberOfBytes": "32",
        "value": "t_struct(LockVe)5656_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockVe)5656_storage": {
        "encoding": "inplace",
        "label": "struct VestingStake.LockVe",
        "members": [
          {
            "astId": 5649,
            "contract": "contracts/VestingStake.sol:VestingStake",
            "label": "startBlockTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5651,
            "contract": "contracts/VestingStake.sol:VestingStake",
            "label": "endBlockTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5653,
            "contract": "contracts/VestingStake.sol:VestingStake",
            "label": "startingAmountLocked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5655,
            "contract": "contracts/VestingStake.sol:VestingStake",
            "label": "initialized",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}