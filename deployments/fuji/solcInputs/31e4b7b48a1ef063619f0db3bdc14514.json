{
  "language": "Solidity",
  "sources": {
    "contracts/AccruingStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title A staking contract which accrues over time based on the amount staked\n/// @author Auroter\n/// @notice Allows you to lock tokens in exchange for distribution tokens\n/// @notice Locks can be deposited into or closed\n/// @dev Simply call stake(...) to deposit tokens\n/// @dev Call getAccrued(user) / getTotalAccrued() = users share\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract AccruingStake is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    // Info pertaining to staking contract\n    address public stakedToken; // An ERC20 Token to be staked (i.e. Axial)\n    string public name; // New asset after staking (i.e. veAxial)\n    string public symbol; // New asset symbol after staking (i.e. veAXIAL)\n\n    // Info pertaining to users\n    uint256 private totalTokensLocked; // Total balance of tokens users have locked\n    uint256 private totalTokensAccrued; // Total balance of accrued tokens currently awarded to users\n    uint256 private lastUserIndexUpdated; // Index of the user whose accrual was most recently updated\n    uint256 private timeStamp; // Last time Total Accrual was updated\n    address[] private users; // An array containing all user addresses\n    mapping(address => AccrueVe) private locks; // A mapping of each users tokens staked\n\n    struct AccrueVe {\n        uint256 accruedTokens; // Quantity of tokens awarded to the user at time of Timestamp\n        uint256 stakedTokens; // Quantity of tokens the user has staked\n        uint256 timeStamp; // Last time the accrual was updated\n        uint256 userIndex; // Index of user, used to manage iteration\n        bool initialized; // True if the user is staked\n    }\n\n    /// @notice Constructor\n    /// @param _stakedToken Address of the token our users will deposit and lock in exchange for governance tokens\n    /// @param _name Desired name of our governance token\n    /// @param _symbol Desired symbol of our governance token\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\n    constructor(\n        address _stakedToken,\n        string memory _name,\n        string memory _symbol,\n        address _governance\n    ) {\n        transferOwnership(_governance);\n        stakedToken = _stakedToken;\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /// @notice Emitted when a user creates a new stake\n    /// @param user Address of the user who staked\n    /// @param amount Quantity of tokens deposited\n    event userStaked(address indexed user, uint256 amount);\n\n    /// @notice Emitted when a user adds to their stake\n    /// @param user Address of the user who staked\n    /// @param amount Quantity of tokens deposited\n    event userRestaked(address indexed user, uint256 amount);\n\n    /// @notice Emitted when a user withdraws their funds\n    /// @param user Address of the user who withdrew\n    /// @param amount Quantity of tokens withdrawn\n    /// @param accrued Quantity of accrued tokens lost\n    event userWithdrew(address indexed user, uint256 amount, uint256 accrued);\n\n    /// @notice Get the number of tokens a user currently has staked\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\n    /// @return Quantity of tokens which a user currently has staked\n    function getStaked(address _userAddr) public view returns (uint256) {\n        return locks[_userAddr].stakedTokens;\n    }\n\n    /// @notice Get the total number of tokens a user has accrued\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\n    /// @return Quantity of tokens which a user has accrued over time\n    /// @dev Use this function to get the numerator for a users share of the rewards pool\n    function getAccrued(address _userAddr) public view returns (uint256) {\n        //return Locks[_userAddr].AccruedTokens;\n        return locks[_userAddr].accruedTokens + (locks[_userAddr].stakedTokens * (block.timestamp - locks[_userAddr].timeStamp));\n    }\n\n    /// @notice Get the total number of tokens accrued via this contract\n    /// @return Quantity of all tokens awarded by this contract\n    /// @dev Use this function to get the denominator for a users share of the rewards pool\n    function getTotalAccrued() public view returns (uint256) {\n        return totalTokensAccrued + (totalTokensLocked * (block.timestamp - timeStamp));\n    }\n\n    /// @notice Retrieve a list of all users who have ever staked\n    /// @return An array of addresses of all users who have ever staked\n    function getAllUsers() public view returns (address[] memory) {\n        return users;\n    }\n\n    // Accrual is tokens locked * seconds\n    /// @notice Update the accrual for a specific user\n    /// @param _userAddr address of user to update\n    /// @dev This synchronizes a users accrual when their deposit amount changes\n    function _updateUsersAccrual(address _userAddr) private {\n        AccrueVe storage lock = locks[_userAddr];\n        uint256 blockTimestamp = block.timestamp;\n\n        uint256 accrual = (blockTimestamp - lock.timeStamp) * lock.stakedTokens;\n\n        lock.timeStamp = blockTimestamp;\n        lock.accruedTokens += accrual;\n    }\n\n    /// @notice Update the total accrual for all users\n    /// @dev This updates the value used as the denominator for a users accrual share\n    /// @dev This must always be called before changing the amount of tokens deposited in this contract\n    function _updateTotalAccrual() private {\n        uint256 currentTime = block.timestamp;\n        uint256 delta = currentTime - timeStamp;\n        totalTokensAccrued += totalTokensLocked * delta;\n        timeStamp = currentTime;\n    }\n\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\n    /// @notice Some users may have accidentally sent these to the contract\n    /// @param _token Address of the non-deposit token\n    /// @dev Always ensure the _token is legitimate before calling this\n    /// @dev A bad token can mimic safetransfer or balanceof with a nocive function\n    function ownerRemoveNonDepositToken(address _token) public nonReentrant onlyOwner {\n        require(_token != stakedToken, \"!invalid\");\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\n        require(balanceOfToken > 0, \"!balance\");\n        IERC20(_token).safeTransfer(owner(), balanceOfToken);\n    }\n\n    /// @notice Transfers deposited tokens back to their original owner\n    /// @notice This will reset the users accrual!\n    /// @dev This could be called by the web application via a button or some other means\n    function withdrawMyFunds() external nonReentrant {\n        address userAddr = msg.sender;\n        uint256 fundsToClaim = locks[userAddr].stakedTokens;\n\n        require(fundsToClaim > 0, \"!funds\");\n        IERC20(stakedToken).safeTransfer(userAddr, fundsToClaim);\n\n        // decrement totals\n        _updateTotalAccrual();\n        uint256 tokensAccrued = getAccrued(userAddr);\n        totalTokensLocked -= fundsToClaim;\n        totalTokensAccrued -= tokensAccrued;\n\n        // Broadcast withdrawal\n        emit userWithdrew(userAddr, fundsToClaim, locks[userAddr].accruedTokens);\n\n        locks[userAddr].stakedTokens = 0;\n        locks[userAddr].accruedTokens = 0;\n        locks[userAddr].initialized = false;\n\n        // Fairly efficient way of removing user from list\n        uint256 lastUsersIndex = users.length - 1;\n        uint256 myIndex = locks[userAddr].userIndex;\n        locks[users[lastUsersIndex]].userIndex = myIndex;\n        users[myIndex] = users[lastUsersIndex];\n        users.pop();\n    }\n\n    /// @notice Deposit tokens into the contract, adjusting accrual rate\n    /// @param _amount Number of tokens to deposit\n    function stake(uint256 _amount) external nonReentrant {\n        require(_amount > 0, \"!amount\");\n\n        address userAddr = msg.sender;\n\n        // Receive the users tokens\n        require(IERC20(stakedToken).balanceOf(userAddr) >= _amount, \"!balance\");\n        require(IERC20(stakedToken).allowance(userAddr, address(this)) >= _amount, \"!approved\");\n        IERC20(stakedToken).safeTransferFrom(userAddr, address(this), _amount);\n\n        _updateTotalAccrual();\n        totalTokensLocked += _amount;\n\n        // Keep track of new users\n        if (!locks[userAddr].initialized) {\n            users.push(userAddr);\n            locks[userAddr].initialized = true;\n            locks[userAddr].timeStamp = block.timestamp; // begin accrual from time of initial deposit\n            locks[userAddr].userIndex = users.length - 1;\n            emit userStaked(userAddr, _amount);\n        } else {\n            _updateUsersAccrual(userAddr); // balance ledger before accrual rate is increased\n            emit userRestaked(userAddr, _amount);\n        }\n\n        // Update balance\n        locks[userAddr].stakedTokens += _amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/GaugeProxy.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {ProtocolGovernance} from \"./libraries/ProtocolGovernance.sol\";\nimport {Strategist} from \"./libraries/Strategist.sol\";\nimport {AccruingStake} from \"./AccruingStake.sol\";\nimport {VestingStake} from \"./VestingStake.sol\";\nimport {IMasterChef} from \"./interfaces/IMasterChef.sol\";\nimport {AxialDummyToken} from \"./AxialDummyToken.sol\";\nimport {Gauge} from \"./Gauge.sol\";\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"hardhat/console.sol\"; // DEBUG\n\ncontract GaugeProxy is ProtocolGovernance {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // ==================== External Dependencies ==================== //\n\n    /// @notice Master Chef Axial V2 contract\n    IMasterChef public MCAV2;\n\n    /// @notice token for voting on Axial distribution to pools - SAXIAL\n    VestingStake public immutable sAxial;\n\n    /// @notice the Axial token contraxt\n    IERC20 public immutable Axial;\n\n    /// @notice dummy token required for masterchef deposits and withdrawals\n    IERC20 public immutable axialDummyToken;\n\n    /// @notice token to allow boosting rewards - VEAXIAL\n    /// @dev This could be an address instead, as we do not use it other than passing the address to the Gauge constructor\n    AccruingStake public immutable veAxial;\n\n    // ==================== Token Voting Storage ==================== //\n\n    /// @notice max time allowed to pass before distribution (6 hours)\n    uint256 public constant DISTRIBUTION_DEADLINE = 21600;\n\n    //uint256 private constant UINT256_MAX = 2**256-1;\n    //uint256 public pid = UINT256_MAX;\n    uint256 public pid = 0;\n    uint256 public totalWeight;\n    uint256 private lockedTotalWeight;\n    uint256 private lockedBalance;\n    uint256 private locktime;\n\n    address[] internal _tokens;\n\n    /// @dev token -> gauge\n    mapping(address => address) public gauges;\n    /// @dev token => gauge\n    mapping(address => address) public deprecated;\n    /// @dev token => weight\n    mapping(address => uint256) public weights;\n    /// @dev token => weight\n    mapping(address => uint256) private lockedWeights;\n    /// @dev msg.sender => token => votes\n    mapping(address => mapping(address => uint256)) public votes;\n    /// @dev msg.sender => token\n    mapping(address => address[]) public tokenVote;\n    /// @dev msg.sender => total voting weight of user\n    mapping(address => uint256) public usedWeights;\n    mapping(address => bool) public deployers;\n\n    constructor(\n        address _governance,\n        address _axial,\n        address _saxial,\n        address _veaxial\n    ) {\n        governance = _governance;\n        Axial = IERC20(_axial);\n        sAxial = VestingStake(_saxial);\n        veAxial = AccruingStake(_veaxial);\n        axialDummyToken = new AxialDummyToken();\n    }\n\n    // ==================== Admin functions ==================== //\n\n    /// @notice adds the specified address to the list of deployers\n    /// @dev deployers can call distribute function\n    function addDeployer(address _deployer) external onlyGovernance {\n        deployers[_deployer] = true;\n    }\n\n    /// @notice removes the specified address from the list of deployers\n    function removeDeployer(address _deployer) external onlyGovernance {\n        deployers[_deployer] = false;\n    }\n\n    // ==================== Modifiers ==================== //\n\n    /// @notice modifier to restrict functinos to governance or strategist roles\n    modifier onlyBenevolent() {\n        require(msg.sender == governance, \"unauthorized sender\");\n        _;\n    }\n\n    // ==================== View functions ==================== //\n\n    /// @notice returns the list of tokens that are currently being voted on\n    function tokens() external view returns (address[] memory) {\n        return _tokens;\n    }\n\n    /// @notice returns the gauge for the specifi(AccruingStake)\n    function getGauge(address _token) external view returns (address) {\n        return gauges[_token];\n    }\n\n    /// @notice returns the number of tokens currently being voted on\n    function length() external view returns (uint256) {\n        return _tokens.length;\n    }\n\n    // ==================== Voting Logic ==================== //\n\n    /// @notice Vote with SAXIAL on a gauge, removing any previous votes\n    /// @param _tokenVote: the array of tokens which will recieve tokens\n    /// @param _weights: the weights to associate with the tokens listed in _tokenVote\n    function vote(address[] calldata _tokenVote, uint256[] calldata _weights)\n        external\n    {\n        require(\n            _tokenVote.length == _weights.length,\n            \"weight/tokenvote length mismatch\"\n        );\n        _vote(msg.sender, _tokenVote, _weights);\n    }\n\n    /// @notice internal voting function\n    function _vote(\n        address _owner,\n        address[] memory _tokenVote,\n        uint256[] memory _weights\n    ) internal {\n        // reset votes of the owner\n        _reset(_owner);\n        uint256 _tokenCnt = _tokenVote.length;\n        uint256 _weight = sAxial.getPower(_owner);\n        uint256 _totalVoteWeight = 0;\n        uint256 _usedWeight = 0;\n\n        for (uint256 i = 0; i < _tokenCnt; i++) {\n            _totalVoteWeight = _totalVoteWeight.add(_weights[i]);\n        }\n\n        for (uint256 i = 0; i < _tokenCnt; i++) {\n            address _token = _tokenVote[i];\n            address _gauge = gauges[_token];\n            // Calculate quantity of users SAXIAL to allocate for the gauge\n            uint256 _tokenWeight = _weights[i].mul(_weight).div(\n                _totalVoteWeight\n            );\n\n            if (_gauge != address(0x0)) {\n                _usedWeight = _usedWeight.add(_tokenWeight);\n                totalWeight = totalWeight.add(_tokenWeight);\n                weights[_token] = weights[_token].add(_tokenWeight);\n                tokenVote[_owner].push(_token);\n                votes[_owner][_token] = _tokenWeight;\n            }\n        }\n        usedWeights[_owner] = _usedWeight;\n    }\n\n    /// @notice Reset votes of msg.sender to 0\n    function reset() external {\n        _reset(msg.sender);\n    }\n\n    /// @notice Internal function to reset votes of the specified address to 0\n    /// @param _owner address of owner of votes to be reset\n    function _reset(address _owner) internal {\n        // Get all tokens that the owner has voted on\n        address[] storage _tokenVote = tokenVote[_owner];\n        uint256 _tokenVoteCnt = _tokenVote.length;\n\n        for (uint256 i = 0; i < _tokenVoteCnt; i++) {\n            address _token = _tokenVote[i];\n            // Get the amount of SAXIAL this user allocated for this specific token\n            uint256 _votes = votes[_owner][_token];\n\n            if (_votes > 0) {\n                totalWeight = totalWeight.sub(_votes);\n                weights[_token] = weights[_token].sub(_votes);\n\n                votes[_owner][_token] = 0;\n            }\n        }\n\n        delete tokenVote[_owner];\n    }\n\n    /// @notice Adjust _owner's votes according to latest _owner's SAXIAL balance\n    function poke(address _owner) public {\n        address[] memory _tokenVote = tokenVote[_owner];\n        uint256 _tokenCnt = _tokenVote.length;\n        uint256[] memory _weights = new uint256[](_tokenCnt);\n\n        for (uint256 i = 0; i < _tokenCnt; i++) {\n            _weights[i] = votes[_owner][_tokenVote[i]];\n        }\n\n        // _weights no longer total 100 like with the front-end\n        // But we will minimize gas by not converting\n        _vote(_owner, _tokenVote, _weights);\n    }\n\n    // ==================== Gauge Logic ==================== //\n\n    /// @notice Add new token gauge\n    function addGauge(address _token) external onlyBenevolent {\n        require(gauges[_token] == address(0x0), \"exists\");\n        gauges[_token] = address(\n            new Gauge(_token, governance, address(veAxial))\n        );\n        _tokens.push(_token);\n    }\n\n    /// @notice Deprecate existing gauge\n    function deprecateGauge(address _token) external onlyBenevolent {\n        require(gauges[_token] != address(0x0), \"does not exist\");\n        deprecated[_token] = gauges[_token];\n        delete gauges[_token];\n    }\n\n    /// @notice Bring Deprecated gauge back into use\n    function renewGauge(address _token) external onlyBenevolent {\n        require(gauges[_token] == address(0x0), \"exists\");\n        require(deprecated[_token] != address(0x0), \"not deprecated\");\n        gauges[_token] = deprecated[_token];\n        delete deprecated[_token];\n    }\n\n    /// @notice Add existing gauge\n    function migrateGauge(address _gauge, address _token)\n        external\n        onlyBenevolent\n    {\n        require(gauges[_token] == address(0x0), \"exists\");\n        gauges[_token] = _gauge;\n        _tokens.push(_token);\n    }\n\n    // ==================== MCAV2 Logic ==================== //\n\n    /// @notice Sets new MCAV2 address.  Useful for debugging.\n    function setMasterChef(address _masterChef) external onlyGovernance {\n        //MCAV2 = IMasterChefAxialV3(_masterChef);\n        MCAV2 = IMasterChef(_masterChef);\n        pid = 0;\n        //pid = UINT256_MAX;\n    }\n\n    /// @notice Sets MCAV2 PID\n    function setPID(uint256 _pid) external onlyGovernance {\n        //require(pid == UINT256_MAX, \"pid has already been set\");\n        // require(_pid < UINT256_MAX, \"invalid pid\");\n        require(pid == 0, \"pid has already been set\");\n        require(_pid != 0, \"invalid pid\");\n        pid = _pid;\n    }\n\n    /// @notice Deposits Axial dummy token into MCAV2\n    function depositDummyToken() public {\n        //require(pid < UINT256_MAX, \"pid not initialized\");\n        require(pid != 0, \"pid not initialized\");\n        uint256 _balance = axialDummyToken.balanceOf(address(this));\n        axialDummyToken.safeApprove(address(MCAV2), 0);\n        axialDummyToken.safeApprove(address(MCAV2), _balance);\n        console.log(\"gaugeProxyAxialDummyBalance=\", _balance);\n        MCAV2.deposit(pid, _balance);\n    }\n\n    /// @notice Collects AXIAL from MCAV2 for distribution\n    function collect() public {\n        (uint256 _locked, ) = MCAV2.userInfo(pid, address(this));\n        MCAV2.withdraw(pid, _locked);\n        depositDummyToken();\n    }\n\n    // ==================== Distribution Logic ==================== //\n\n    /// @notice collect AXIAL and update lock information\n    function preDistribute() external {\n        require(\n            deployers[msg.sender] || msg.sender == governance,\n            \"unauthorized sender\"\n        );\n        lockedTotalWeight = totalWeight;\n        for (uint256 i = 0; i < _tokens.length; i++) {\n            lockedWeights[_tokens[i]] = weights[_tokens[i]];\n        }\n        collect();\n        lockedBalance = Axial.balanceOf(address(this));\n        locktime = block.timestamp;\n    }\n\n    /// @notice Distribute tokens to gauges\n    function distribute(uint256 _start, uint256 _end) external {\n        require(\n            deployers[msg.sender] || msg.sender == governance,\n            \"unauthorized sender\"\n        );\n        require(_start < _end, \"bad _start\");\n        require(_end <= _tokens.length, \"bad _end\");\n        require(\n            locktime + DISTRIBUTION_DEADLINE >= block.timestamp,\n            \"lock expired\"\n        );\n        console.log(\"lockedBalance=\", lockedBalance);\n        console.log(\"lockedTotalWeight=\", lockedTotalWeight);\n        if (lockedBalance > 0 && lockedTotalWeight > 0) {\n            for (uint256 i = _start; i < _end; i++) {\n                address _token = _tokens[i];\n                address _gauge = gauges[_token];\n                uint256 _reward = lockedBalance.mul(lockedWeights[_token]).div(\n                    totalWeight\n                );\n                console.log(\"_reward=\", _reward);\n                if (_reward > 0) {\n                    Axial.safeApprove(_gauge, 0);\n                    Axial.safeApprove(_gauge, _reward);\n                    Gauge(_gauge).notifyRewardAmount(_reward);\n                }\n            }\n        }\n    }\n}\n"
    },
    "contracts/libraries/ProtocolGovernance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ncontract ProtocolGovernance {\n    /// @notice address of the governance contract\n    address public governance;\n    address public pendingGovernance;\n\n    /// @notice modifier to allow for easy gov only control over a function\n    modifier onlyGovernance() {\n        require(msg.sender == governance, \"unauthorized sender (governance\");\n        _;\n    }\n\n    /// @notice Allows governance to change governance (for future upgradability)\n    /// @param _governance new governance address to set\n    function setGovernance(address _governance) external onlyGovernance {\n        pendingGovernance = _governance;\n    }\n\n    /// @notice Allows pendingGovernance to accept their role as governance (protection pattern)\n    function acceptGovernance() external {\n        require(\n            msg.sender == pendingGovernance,\n            \"acceptGovernance: !pendingGov\"\n        );\n        governance = pendingGovernance;\n    }\n}\n"
    },
    "contracts/libraries/Strategist.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\ncontract Strategist {\n    /// @notice strategist address for the strategist contract\n    address public strategist;\n    address public pendingStrategist;\n\n    /// @notice modifier to allow for easy gov only control over a function\n    modifier onlyStrategist() {\n        require(msg.sender == strategist, \"unauthorized sender (strategist)\");\n        _;\n    }\n\n    /// @notice Allows strategist to change strategist (for future upgradability)\n    /// @param _strategist new strategist address to set\n    function setStrategist(address _strategist) external onlyStrategist {\n        pendingStrategist = _strategist;\n    }\n\n    /// @notice Allows pendingStrategist to accept their role as strategist\n    function acceptStrategist() external {\n        require(\n            msg.sender == pendingStrategist,\n            \"unauthorized sender (pendingStrategist)\"\n        );\n        strategist = pendingStrategist;\n    }\n}\n"
    },
    "contracts/VestingStake.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title A vesting style staking contract with extendable linear decay\n/// @author Auroter\n/// @notice Allows you to lock tokens in exchange for governance tokens\n/// @notice Locks can be extended or deposited into\n/// @notice Maximum deposit duration is two years (104 weeks)\n/// @dev Simply call stake(...) to create initial lock or extend one that already exists for the user\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract VestingStake is ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    // Info pertaining to staking contract\n    address public stakedToken; // An ERC20 Token to be staked (i.e. Axial)\n    string public name; // New asset after staking (i.e. sAxial)\n    string public symbol; // New asset symbol after staking (i.e. sAXIAL)\n    uint256 private interpolationGranularity = 1e18; // Note: ERC20.decimals() is for display and does not affect arithmetic!\n\n    // Info pertaining to users\n    address[] private users; // An array containing all user addresses\n    mapping(address => LockVe) private locks; // A mapping of each users lock\n    mapping(address => uint256) private lockedFunds; // A mapping of each users total deposited funds\n    mapping(address => uint256) private deferredFunds; // A mapping of vested funds the user wishes to leave unclaimed\n\n    // Lock structure, only one of these is allowed per user\n    // A DELTA can be derived as the degree of interpolation between the start/end block:\n    // Delta = (end - now) / end - start\n    // This can be used to determine how much of our staked token is unlocked:\n    // currentAmountLocked = startingAmountLocked - (delta * startingAmountLocked)\n    struct LockVe {\n        uint256 startBlockTime;\n        uint256 endBlockTime;\n        uint256 startingAmountLocked;\n        bool initialized;\n    }\n\n    /// @notice Constructor\n    /// @param _stakedToken Address of the token our users will deposit and lock in exchange for governance tokens\n    /// @param _name Desired name of our governance token\n    /// @param _symbol Desired symbol of our governance token\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\n    constructor(\n        address _stakedToken,\n        string memory _name,\n        string memory _symbol,\n        address _governance\n    ) {\n        transferOwnership(_governance);\n        stakedToken = _stakedToken;\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /// @notice Emitted when a user stakes for the first time\n    /// @param user Address of the user who staked\n    /// @param amount Quantity of tokens staked\n    /// @param duration Length in seconds of stake\n    event userStaked(address indexed user, uint256 amount, uint256 duration);\n\n    /// @notice Emitted when a user extends and/or deposits into their existing stake\n    /// @param user Address of the user who staked\n    /// @param amount New total quantity of tokens in stake\n    /// @param duration New total length of stake\n    event userExtended(address indexed user, uint256 amount, uint256 duration);\n\n    /// @notice Emitted when a user claims outstanding vested balance\n    /// @param user Address of the user who claimed\n    /// @param amount Quantity of tokens claimed\n    event userClaimed(address indexed user, uint256 amount);\n\n    /// @notice Calculate the number of vested tokens a user has not claimed\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\n    /// @return Quantity of tokens which have vested but are unclaimed by the specified user\n    function getUnclaimed(address _userAddr) public view returns (uint256) {\n        uint256 totalFundsDeposited = lockedFunds[_userAddr] + deferredFunds[_userAddr];\n        uint256 currentBalance = getBalance(_userAddr);\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\n        return fundsToClaim;\n    }\n\n    /// @notice Calculate the number of tokens a user still has locked\n    /// @param _userAddr Address of any user to view the number of tokens they still have locked\n    /// @return Quantity of tokens the user has locked\n    function getBalance(address _userAddr) public view returns (uint256) {\n        LockVe memory usersLock = locks[_userAddr];\n\n        uint256 currentTimestamp = block.timestamp;\n        uint256 balance = 0;\n\n        if (usersLock.endBlockTime > currentTimestamp) {\n            uint256 granularDelta = ((usersLock.endBlockTime - currentTimestamp) * interpolationGranularity) / (usersLock.endBlockTime - usersLock.startBlockTime);\n            balance += (usersLock.startingAmountLocked * granularDelta) / interpolationGranularity;\n        }\n        return balance;\n    }\n\n    /// @notice This is an overload for getPower so that users can see the 'token' in their wallets\n    function balanceOf(address _account) external view returns (uint256) {\n        return getPower(_account);\n    }\n\n    /// @notice Calculate the number of governance tokens currently allocated to a user by this contract\n    /// @param _userAddr Address of any user to view the number of governance tokens currently awarded to them\n    /// @return Quantity of governance tokens allocated to the user\n    function getPower(address _userAddr) public view returns (uint256) {\n        LockVe memory usersLock = locks[_userAddr];\n\n        uint256 currentTimestamp = block.timestamp;\n        uint256 power = 0;\n\n        if (usersLock.endBlockTime > currentTimestamp) {\n            // let delta = elapsed / totalLocktinme\n            // let startingPower = duration / 2 years\n            // let power = delta * startingPower\n            uint256 startingAmountAwarded = ((usersLock.endBlockTime - usersLock.startBlockTime) * usersLock.startingAmountLocked) / 104 weeks;\n            uint256 granularDelta = ((usersLock.endBlockTime - currentTimestamp) * interpolationGranularity) / (usersLock.endBlockTime - usersLock.startBlockTime);\n            power += (startingAmountAwarded * granularDelta) / interpolationGranularity;\n        }\n        return power;\n    }\n\n    /// @notice Retrieve a list of all users who have ever staked\n    /// @return An array of addresses of all users who have ever staked\n    function getAllUsers() public view returns (address[] memory) {\n        return users;\n    }\n\n    /// @notice Check if a user has ever created a Lock in this contract\n    /// @param _userAddr Address of any user to check\n    /// @dev This may be used by the web application to determine if the UI says \"Create Lock\" or \"Add to Lock\"\n    /// @return True if the user has ever created a lock\n    function isUserLocked(address _userAddr) public view returns (bool) {\n        LockVe memory usersLock = locks[_userAddr];\n        return usersLock.initialized;\n    }\n\n    /// @notice View a users Lock\n    /// @param _userAddr Address of any user to view all Locks they have ever created\n    /// @dev This may be used by the web application for graphical illustration purposes\n    /// @return Users Lock in the format of the LockVe struct\n    function getLock(address _userAddr) public view returns (LockVe memory) {\n        return locks[_userAddr];\n    }\n\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\n    /// @notice Some users may have accidentally sent these to the contract\n    /// @param _token Address of the non-deposit token\n    /// @dev Always ensure the _token is legitimate before calling this\n    /// @dev A bad token can mimic safetransfer or balanceof with a nocive function\n    function ownerRemoveNonDepositToken(address _token) public nonReentrant onlyOwner {\n        require(_token != stakedToken, \"!invalid\");\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\n        require(balanceOfToken > 0, \"!balance\");\n        IERC20(_token).safeTransfer(owner(), balanceOfToken);\n    }\n\n    /// @notice Transfers vested tokens back to their original owner\n    /// @notice It is up to the user to invoke this manually\n    /// @dev This will need to be called by the web application via a button or some other means\n    function claimMyFunds() external nonReentrant {\n        address userAddr = msg.sender;\n        uint256 totalFundsDeposited = lockedFunds[userAddr] + deferredFunds[userAddr];\n        uint256 currentBalance = getBalance(userAddr);\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\n\n        IERC20(stakedToken).safeTransfer(userAddr, fundsToClaim);\n\n        lockedFunds[userAddr] = currentBalance;\n        deferredFunds[userAddr] = 0;\n\n        emit userClaimed(userAddr, fundsToClaim);\n    }\n\n    /// @notice Create/extend the duration of the invoking users lock and/or deposit additional tokens into it\n    /// @param _duration Number of seconds the invoking user will extend their lock for\n    /// @param _amount Number of additional tokens to deposit into the lock\n    /// @param _deferUnclaimed If True, leaves any unclaimed vested balance in the staking contract\n    function stake(uint256 _duration, uint256 _amount, bool _deferUnclaimed) public nonReentrant {\n        require(_duration > 0 || _amount > 0, \"null\");\n\n        // Retrieve lock the user may have already created\n        address userAddr = msg.sender;\n        LockVe memory usersLock = locks[userAddr];\n\n        uint256 oldDurationRemaining = 0;\n\n        // Keep track of new user or pre-existing lockout period\n        if (!usersLock.initialized) {\n            users.push(userAddr);\n        } else if (block.timestamp < usersLock.endBlockTime) {\n            oldDurationRemaining = usersLock.endBlockTime - block.timestamp;\n        }\n\n        require (oldDurationRemaining + _duration <= 104 weeks, \">2 years\");\n\n        // Receive the users tokens\n        require(IERC20(stakedToken).balanceOf(userAddr) >= _amount, \"!balance\");\n        require(IERC20(stakedToken).allowance(userAddr, address(this)) >= _amount, \"!approved\");\n        IERC20(stakedToken).safeTransferFrom(userAddr,  address(this), _amount);\n\n        // Account for balance / unclaimed funds\n        uint256 totalFundsDeposited = lockedFunds[userAddr];\n        uint256 oldBalance = getBalance(userAddr);\n        uint256 fundsUnclaimed = totalFundsDeposited - oldBalance;\n        if (!_deferUnclaimed) {\n            fundsUnclaimed += deferredFunds[userAddr];\n            IERC20(stakedToken).safeTransfer(userAddr, fundsUnclaimed);\n            deferredFunds[userAddr] = 0;\n            emit userClaimed(userAddr, fundsUnclaimed);\n        } else {\n            deferredFunds[userAddr] += fundsUnclaimed;\n        }\n        uint256 newTotalDeposit = oldBalance + _amount;\n\n        // Update balance\n        lockedFunds[userAddr] = newTotalDeposit;\n\n        // Fill out updated LockVe struct\n        LockVe memory newLock;\n        newLock.startBlockTime = block.timestamp;\n        newLock.endBlockTime = newLock.startBlockTime + _duration + oldDurationRemaining;\n        newLock.startingAmountLocked = newTotalDeposit;\n        newLock.initialized = true;\n        locks[userAddr] = newLock;\n\n        // Events\n        if (oldDurationRemaining == 0) {\n            emit userStaked(userAddr, newTotalDeposit, newLock.endBlockTime - newLock.startBlockTime);\n        } else {\n            emit userExtended(userAddr, newTotalDeposit, newLock.endBlockTime - newLock.startBlockTime);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IMasterChef.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Master Chef V2(MCAV2) interface\n/// @notice Interface for the MCAV2 contract that will control minting of AXIAL\ninterface IMasterChef {\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    struct PoolInfo {\n        IERC20 lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. AXIALs to distribute per second.\n        uint256 lastRewardTimestamp; // Last timestamp that AXIALs distribution occurs.\n        uint256 accAxialPerShare; // Accumulated AXIALs per share, times 1e12. See below.\n    }\n\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\n\n    function totalAllocPoint() external view returns (uint256);\n\n    function axialPerSec() external view returns (uint256);\n\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function devPercent() external view returns (uint256);\n\n    function treasuryPercent() external view returns (uint256);\n\n    function investorPercent() external view returns (uint256);\n\n    function userInfo(uint256 pid, address addr) external view returns (uint256, uint256);\n\n    function withdraw(uint256 pid, uint256 amount) external;\n}\n"
    },
    "contracts/AxialDummyToken.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract AxialDummyToken is ERC20(\"AxialDummyToken\", \"AXD\") {\n    using SafeMath for uint256;\n\n    constructor() {\n        _mint(msg.sender, 1e18);\n    }\n}\n"
    },
    "contracts/Gauge.sol": {
      "content": "/// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport {ProtocolGovernance} from \"./libraries/ProtocolGovernance.sol\";\nimport {AccruingStake} from \"./AccruingStake.sol\";\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"hardhat/console.sol\";\n\n// TODO, both primary rewards and extra rewards are contingent upon [boost factor (boostFactor), user balance in gauge] but otherwise share no logic.\n// They do not share the way reward rate is calculated.  Reward rate for Axial is based on a weekly cadence.  Extra rewards are determined by:\n// rewardPerSec[token]\n// If we run out of tokens we need to handle it gracefully!!!!!!!!!\n// TEST FOR RUNNING OUT OF TOKENS, MAKE SURE IT DOESNT CONTINUE TRYING TO DISTRIBUTE THE AUTHORITY TO WITHDRAW ADDITIONAL TOKENS\n// reward tokens should only be \"put\" into claimable pool if there is in fact a balance.\n\ncontract Gauge is ProtocolGovernance, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    // ==================== External Dependencies ==================== //\n\n    /// The Axial token contract\n    IERC20 public constant AXIAL = IERC20(0xcF8419A615c57511807236751c0AF38Db4ba3351);\n\n    /// Token to allow boosting partner token rewards - VEAXIAL\n    AccruingStake public immutable VEAXIAL;\n\n    /// Token to be staked in return for primary rewards\n    IERC20 public immutable poolToken;\n\n    // ==================== Events ==================== //\n\n    /// @notice emitted when a user stakes\n    /// @param user The address of the user who staked\n    /// @param amount the quantity of tokens the user staked\n    event Staked(address indexed user, uint256 amount);\n\n    /// @notice emitted when a user withdraws\n    /// @param user The address of the user who withdrew\n    /// @param amount The quantity of tokens the user withdrew\n    event Withdrawn(address indexed user, uint256 amount);\n\n    /// @notice emitted when a reward is claimed by a user\n    /// @param user The address of the user who claimed the reward\n    /// @param reward The quantity of tokens the user claimed\n    /// @param token The address of the token the user claimed\n    event RewardPaid(address indexed user, uint256 reward, address token);\n\n    /// @notice emitted when the primary reward or partner rewards are added to the gauge\n    /// @param reward the quantity of tokens added\n    /// @param token the address of the reward token\n    event RewardAdded(uint256 reward, address token);\n\n    // ==================== State Variables ==================== //\n\n    /// tokens to be distributed as a reward to stakers, 0 is primary reward and 1-... are partner rewards\n    address[] public rewardTokens;\n\n    /// contract responsible for distributing primary rewards (should be Gauge Proxy)\n    address public gaugeProxy;\n\n    /// Distribution interval for primary reward token\n    uint256 public constant PRIMARY_REWARD_DURATION = 7 days;\n    mapping(address => uint256) partnerRewardDurations;\n\n    /// Used to keep track of reward token intervals\n    // token => time\n    mapping (address => uint256) public periodFinish;\n    mapping (address => uint256) public lastUpdateTime;\n\n    /// Primary reward token rate\n    mapping (address => uint256) public rewardRates;\n\n    // token => amount\n    mapping (address => uint256) public rewardPerTokenStored;\n\n    /// @dev user => reward token => amount\n    mapping(address => mapping (address => uint256)) public userRewardPerTokenPaid;\n\n    /// @dev user => reward token => amount\n    mapping(address => mapping (address => uint256)) public rewards;\n\n    /// total supply of the primary reward token and partner reward tokens\n    uint256 private _totalLPTokenSupply;\n\n    /// boost-adjusted supply of the reward tokens\n    mapping (address => uint256) public derivedSupply;\n\n    /// user => LP token balance\n    mapping(address => uint256) private _lpTokenBalances;\n\n    /// user => boost factor\n    mapping(address => uint256) public boostFactors;\n\n    /// PARTNER STUFF:\n\n    /// partner reward token => partner, used to determine permission for setting reward rates\n    mapping(address => address) public tokenPartners;\n\n    // ==================== Modifiers ==================== //\n\n    // Affects all rewards\n    modifier updateReward(address account) {\n        for (uint i = 0; i < rewardTokens.length; ++i) {\n            address token = rewardTokens[i];\n            //lastUpdateTime[token] = lastTimeRewardApplicable(token);\n            rewardPerTokenStored[token] = rewardPerToken(token);\n            if (account != address(0)) {\n                rewards[account][token] = earned(account, token);\n                userRewardPerTokenPaid[account][token] = rewardPerTokenStored[token];\n            }\n            lastUpdateTime[token] = lastTimeRewardApplicable(token);\n        }\n        _;\n        if (account != address(0)) {\n            kick(account);\n        }\n    }\n\n    modifier onlyDistribution() {\n        require(msg.sender == gaugeProxy, \"Gauge: not distribution contract\");\n        _;\n    }\n\n    modifier validAddress(address _rewardToken) {\n        require(Address.isContract(_rewardToken), \"Gauge: not a contract\");\n        _;\n    }\n\n    constructor(\n        address _token,\n        address _governance,\n        address _veaxial\n    ) {\n        poolToken = IERC20(_token);\n        gaugeProxy = msg.sender;\n        governance = _governance;\n        VEAXIAL = AccruingStake(_veaxial);\n        rewardTokens.push(address(AXIAL));\n    }\n\n    // ==================== Reward Token Logic ==================== //\n\n    /// @notice adding a reward token to our array\n    /// @param tokenAddress Reward token to be added to our rewardTokens array\n    /// @param partnerAddress Address of partner who has permission to set the token reward rate\n    function addRewardToken(address tokenAddress, address partnerAddress)\n        public\n        onlyGovernance\n        validAddress(tokenAddress)\n    {\n        require(tokenPartners[tokenAddress] == address(0), \"Token already in use\");\n        tokenPartners[tokenAddress] = partnerAddress; // certify partner with the authority to provide rewards for the token\n        rewardTokens.push(tokenAddress); // add token to our list of reward token addresses\n    }\n\n    /// @notice returns the amount of reward tokens for the gauge\n    function getNumRewardTokens() public view returns (uint256) {\n        return rewardTokens.length;\n    }\n\n    function partnerDepositRewardTokens(address tokenAddress, uint256 amount, uint256 rewardPerSec) external updateReward(address(0)) {\n        require(tokenPartners[tokenAddress] == msg.sender, \"You do not have the right.\");\n        require (rewardPerSec != 0, \"Cannot set reward rate to 0\");\n        IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Get balance in case there was some pending balance\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\n\n        uint duration = balance / rewardPerSec;\n\n        lastUpdateTime[tokenAddress] = block.timestamp;\n        periodFinish[tokenAddress] = block.timestamp.add(duration);\n        rewardRates[tokenAddress] = rewardPerSec; // Just set the reward rate even if there is still pending balance\n        emit RewardAdded(amount, tokenAddress);\n    }\n\n    /// @notice return how many of our reward tokens is the user receiving per lp token\n    /// @dev (e.g. how many teddy or axial is received per AC4D token)\n    function rewardPerToken(address token) public view returns (uint256) {\n        if (_totalLPTokenSupply == 0 || derivedSupply[token] == 0) {\n            console.log(derivedSupply[token]);\n            return rewardPerTokenStored[token];\n        }\n\n        // rPTS + (lTRA - lUT * rR * 1e18 / dS)\n        // console.log(\"rPTS=\", rewardPerTokenStored[token]);\n        // console.log(\"lTRA=\", lastTimeRewardApplicable(token));\n        // console.log(\"lUT=\", lastUpdateTime[token]);\n        // console.log(\"rR1e18=\", rewardRates[token] * 1e18);\n        // console.log(\"dS=\", derivedSupply[token]);\n\n        // Debug\n        // uint256 rPT = rewardPerTokenStored[token].add(lastTimeRewardApplicable(token).sub(lastUpdateTime[token]).mul(rewardRates[token]).mul(1e18).div(derivedSupply[token]));\n        // console.log(\"rPT=\", rPT);\n        uint256 r = lastTimeRewardApplicable(token).sub(lastUpdateTime[token]).mul(rewardRates[token]).mul(1e18);\n        console.log(\"r=\", r);\n        uint256 ds = derivedSupply[token];\n        console.log(\"ds=\", ds);\n\n        return rewardPerTokenStored[token].add(lastTimeRewardApplicable(token).sub(lastUpdateTime[token]).mul(rewardRates[token]).mul(1e18).div(derivedSupply[token]));\n    }\n\n    /// @notice getting the reward to be received for primary tokens respective staking period\n    function getRewardForDuration() external view returns (uint256)\n    {\n        address token = rewardTokens[0];\n        return rewardRates[token].mul(PRIMARY_REWARD_DURATION);\n    }\n\n    /// @notice gets the amount of reward tokens that the user has earned\n    function earned(address account, address token)\n        public\n        view\n        returns (uint256)\n    {\n        // x = bF * ( rPT - uRPTP ) / 1e18 + r \n        // console.log(\"bF=\", boostFactors[account]);\n        // console.log(\"rPT=\", rewardPerToken(token));\n        // console.log(\"uRPTP=\", userRewardPerTokenPaid[account][token]);\n        // console.log(\"1e18+r=\", 1e18 + rewards[account][token]);\n\n        // debug\n        // uint256 e = boostFactors[account].mul(rewardPerToken(token).sub(userRewardPerTokenPaid[account][token])).div(1e18).add(rewards[account][token]);\n        // console.log(\"e=\", e);\n\n        uint256 uRPTP = userRewardPerTokenPaid[account][token];\n        console.log(\"uRPTP=\", uRPTP);\n\n        return userShare(account).mul(boostFactors[account].mul(rewardPerToken(token).sub(userRewardPerTokenPaid[account][token])).div(1e18).add(rewards[account][token])).div(1e18);\n\n        //return boostFactors[account].mul(rewardPerToken(token).sub(userRewardPerTokenPaid[account][token])).div(1e18).add(rewards[account][token]);\n    }\n\n    /// @notice This function is to allow us to update the gaugeProxy without resetting the old gauges.\n    /// @dev this changes where it is receiving the axial tokens, as well as changes the governance\n    function changeDistribution(address _distribution) external onlyGovernance {\n        gaugeProxy = _distribution;\n    }\n\n    /// @notice total supply of our lp tokens in the gauge (e.g. AC4D tokens present)\n    function totalSupply() external view returns (uint256) {\n        return _totalLPTokenSupply;\n    }\n\n    /// @notice balance of lp tokens that user has in the gauge (e.g. amount of AC4D a user has)\n    function balanceOf(address account) external view returns (uint256) {\n        return _lpTokenBalances[account];\n    }\n\n    function lastTimeRewardApplicable(address token) public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish[token]);\n    }\n\n    // returns the users share of the total LP supply * 1e18\n    function userShare(address account) public view returns (uint256) {\n        return _lpTokenBalances[account] * 1e18 / _totalLPTokenSupply;\n    }\n\n    /// @notice returns boost factor for specified account\n    function boostFactor(address account) public view returns (uint256) {\n        uint256 _userBalanceInGauge = _lpTokenBalances[account];\n\n        // If the user has no tokens in the gauge, return 0 \n        if (_userBalanceInGauge == 0) {\n            return 0;\n        }\n\n        uint256 usersVeAxialBalance = VEAXIAL.getAccrued(account); // get the veAxial balance of the account\n        uint256 totalVeAxial = VEAXIAL.getTotalAccrued(); // get the total veAxial\n\n        uint256 _adjusted;\n        if (totalVeAxial != 0) {\n            _adjusted = (_totalLPTokenSupply.mul(usersVeAxialBalance).div(totalVeAxial));\n        }\n\n        return (_userBalanceInGauge + _adjusted) / _userBalanceInGauge;\n    }\n\n    function kick(address account) public {\n        uint256 _boostFactor = boostFactors[account];\n\n        for (uint256 i = 0; i < rewardTokens.length; ++i) {\n            address token = rewardTokens[i];\n            //console.log(token);\n            //console.log(\"account=\", account);\n            //console.log(\"derivedSupply=\", derivedSupply[token]);\n            //console.log(\"boostFactor=\", _boostFactor);\n            if (derivedSupply[token] > 0) {\n                derivedSupply[token] = derivedSupply[token].sub(_boostFactor);\n            }\n        }\n\n        _boostFactor = boostFactor(account);\n        boostFactors[account] = _boostFactor;\n\n        for (uint256 i = 0; i < rewardTokens.length; ++i) {\n            address token = rewardTokens[i];\n            //console.log(token);\n            derivedSupply[token] = derivedSupply[token].add(_boostFactor);\n        }\n    }\n\n    /// @notice internal deposit function\n    function _deposit(uint256 amount, address account)\n        internal\n        nonReentrant\n        updateReward(account)\n    {\n        require(amount > 0, \"Cannot stake 0\");\n        poolToken.safeTransferFrom(account, address(this), amount);\n        _totalLPTokenSupply = _totalLPTokenSupply.add(amount);\n        _lpTokenBalances[account] = _lpTokenBalances[account].add(amount);\n        emit Staked(account, amount);\n    }\n\n    /// @notice deposits all pool tokens to the gauge\n    function depositAll() external {\n        _deposit(poolToken.balanceOf(msg.sender), msg.sender);\n    }\n\n    /// @notice deposits specified amount of tokens into the gauge from msg.sender\n    function deposit(uint256 amount) external {\n        _deposit(amount, msg.sender);\n    }\n\n    /// @notice deposit specified amount of tokens into the gauge on behalf of specified account\n    /// @param amount amount of tokens to be deposited\n    /// @param account account to deposit from\n    function depositFor(uint256 amount, address account) external {\n        require(account != address(this), \"!account\"); // prevent inflation\n        _deposit(amount, account);\n    }\n\n    /// @notice internal withdraw function\n    function _withdraw(uint256 amount)\n        internal\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        poolToken.safeTransfer(msg.sender, amount);\n        require(amount > 0, \"Cannot withdraw 0\");\n        _totalLPTokenSupply = _totalLPTokenSupply.sub(amount);\n        _lpTokenBalances[msg.sender] = _lpTokenBalances[msg.sender].sub(amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    /// @notice withdraws all pool tokens from the gauge\n    function withdrawAll() external {\n        _withdraw(_lpTokenBalances[msg.sender]);\n    }\n\n    /// @notice withdraw specified amount of primary pool tokens from the message senders balance\n    function withdraw(uint256 amount) external {\n        _withdraw(amount);\n    }\n\n    /// @notice get reward tokens from gauge\n    function getReward(uint256 tokenIndex)\n        public\n        nonReentrant\n        updateReward(msg.sender)\n    {\n        address token = rewardTokens[tokenIndex];\n        require(token != address(0), \"Reward token does not exist\");\n        uint256 reward = rewards[msg.sender][token];\n        console.log(\"reward=\", reward);\n        // DEBUG\n        uint256 _reward = IERC20(token).balanceOf(address(this));\n        console.log(\"balance=\", _reward);\n        if (reward > 0) {\n            IERC20(token).safeTransfer(msg.sender, reward);\n            rewards[msg.sender][token] = 0;\n            emit RewardPaid(msg.sender, reward, token);\n        }\n    }\n\n    /// @notice claims specific reward indices\n    function getRewards(uint256[] calldata tokenIndices) public {\n        for (uint256 i = 0; i < tokenIndices.length; ++i) {\n            getReward(tokenIndices[i]);\n        }\n    }\n\n    // /// @notice claims all rewards\n    function getAllRewards() public {\n        for (uint256 i = 0; i < rewardTokens.length; ++i) {\n            getReward(i);\n        }\n    }\n\n    /// @notice withdraw deposited pool tokens and claim reward tokens\n    function exit() external {\n        _withdraw(_lpTokenBalances[msg.sender]);\n        getAllRewards();\n    }\n\n    /// @notice only called by the GaugeProxy and so only deals in the native token\n    function notifyRewardAmount(uint256 reward)\n        external\n        onlyDistribution\n        updateReward(address(0))\n    {\n        address token = rewardTokens[0];\n        IERC20(token).safeTransferFrom(\n            gaugeProxy,\n            address(this),\n            reward\n        );\n        if (block.timestamp >= periodFinish[token]) {\n            rewardRates[token] = reward.div(PRIMARY_REWARD_DURATION);\n        } else {\n            uint256 remaining = periodFinish[token].sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRates[token]);\n            //console.log(PRIMARY_REWARD_DURATION);\n            rewardRates[token] = reward.add(leftover).div(PRIMARY_REWARD_DURATION);\n        }\n\n        // Ensure the provided reward amount is not more than the balance in the contract.\n        // This keeps the reward rate in the right range, preventing overflows due to\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(\n            rewardRates[token] <= balance.div(PRIMARY_REWARD_DURATION),\n            \"Provided reward too high\"\n        );\n\n        lastUpdateTime[token] = block.timestamp;\n        periodFinish[token] = block.timestamp.add(PRIMARY_REWARD_DURATION);\n        emit RewardAdded(reward, token);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/Governance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title A governance contract for proposals, voting, and execution\n/// @author Auroter\n/// @notice Uses the StakedAxial contract to determine users voting power\n/// @notice Multiple executions can be included in a single yes/no proposal\n/// @notice Multiple-choice proposals are also valid and can be used to select a specific execution context\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// import \"hardhat/console.sol\";\n\ninterface IsAxial {\n  function balanceOf(address _account) external view returns (uint256);\n}\n\ncontract Governance is ReentrancyGuard, Ownable {\n\n    /// @notice Lower bound for the voting period\n    uint256 public minimumVotingPeriod = 3 days;\n    uint256 public constant VOTING_PERIOD_MINIMUM = 1 days;\n    uint256 public constant VOTING_PERIOD_MAXIMUM = 30 days;\n\n    /// @notice Seconds since the end of the voting period before the proposal can be executed\n    uint256 public executionDelay = 24 hours;\n    uint256 public constant EXECUTION_DELAY_MINIMUM = 30 seconds;\n    uint256 public constant EXECUTION_DELAY_MAXIMUM = 30 days;\n\n    /// @notice Seconds since the proposal could be executed until it is considered expired\n    uint256 public constant EXPIRATION_PERIOD = 14 days;\n\n    /// @notice The required minimum number of votes in support of a proposal for it to succeed\n    uint256 public quorumVotes = 300_000e18;\n    uint256 public constant QUORUM_VOTES_MINIMUM = 100_000e18;\n    uint256 public constant QUORUM_VOTES_MAXIMUM = 18_000_000e18;\n\n    /// @notice The minimum number of votes required for an account to create a proposal\n    uint256 public proposalThreshold = 100_000e18;\n    uint256 public constant PROPOSAL_THRESHOLD_MINIMUM = 50_000e18;\n    uint256 public constant PROPOSAL_THRESHOLD_MAXIMUM = 10_000_000e18;\n\n    /// @notice The total number of proposals\n    uint256 public proposalCount;\n\n    /// @notice The record of all proposals ever proposed\n    mapping(uint256 => Proposal) public proposals;\n    mapping(uint256 => mapping(address => Receipt)) public receipts;\n    mapping(address => uint256) public lastProposalByAddress;\n\n    /// @notice Non-tradeable sAXIAL used to represent votes\n    IsAxial public sAXIAL;\n\n    struct Proposal {\n        string title;\n        string metadata;\n        address proposer;\n        address executor;\n        uint256 startTime;\n        uint256 votingPeriod;\n        uint256 quorumVotes;\n        uint256 executionDelay;\n        uint256[] votes;\n        bool isBoolean;\n        ProposalExecutionContextList executionContexts;\n    }\n\n    struct ProposalExecutionContext {\n        string label; // Description of execution context\n        address target; // The contract we wish to manipulate\n        uint256 value; // We set this if the function requires native AVAX\n        bytes data; // *encoded* function and parameters being executed at target\n    }\n\n    struct ProposalExecutionContextList {\n        uint256 length;\n        ProposalExecutionContext[] contexts;\n    }\n\n    struct Receipt {\n        bool hasVoted; // did the user vote\n        uint256 support; // what did user vote for?\n        uint256 votes; // weight of the users vote\n    }\n\n    enum ProposalState {\n        Active,\n        Defeated,\n        PendingExecution,\n        ReadyForExecution,\n        Executed,\n        Expired\n    }\n\n    // emitted whenever a user votes\n    event NewVote(\n        uint256 proposalId,\n        address voter,\n        uint256 support,\n        uint256 votes\n    );\n\n    event ProposalCreated(uint256 proposalId, address proposer, string title);\n    event ProposalExecuted(uint256 proposalId, address executor);\n    event MinimumVotingPeriodChanged(uint256 newMinimumVotingPeriod);\n    event ExecutionDelayChanged(uint256 newExecutionDelay);\n    event QuorumVotesChanges(uint256 newQuorumVotes);\n    event ProposalThresholdChanged(uint256 newProposalThreshold);\n\n    /// @notice Constructor\n    /// @param _sAXIAL the address of the contract which determines each users voting power\n    /// @dev This token must not be tradeable\n    constructor(address _sAXIAL) {\n        sAXIAL = IsAxial(_sAXIAL);\n    }\n\n    function getProposalVotes(uint256 proposalId) public view returns (uint256[] memory) {\n        return proposals[proposalId].votes;\n    }\n\n    // Setters\n\n    function setMinimumVotingPeriod(uint256 _seconds) public onlyOwner {\n        require(\n            _seconds >= VOTING_PERIOD_MINIMUM,\n            \"Governance::setMinimumVotingPeriod: TOO_SMALL\"\n        );\n        require(\n            _seconds <= VOTING_PERIOD_MAXIMUM,\n            \"Governance::setMinimumVotingPeriod: TOO_LARGE\"\n        );\n        minimumVotingPeriod = _seconds;\n        emit MinimumVotingPeriodChanged(_seconds);\n    }\n\n    function setExecutionDelay(uint256 _seconds) public onlyOwner {\n        require(\n            _seconds >= EXECUTION_DELAY_MINIMUM,\n            \"Governance::setExecutionDelay: TOO_SMALL\"\n        );\n        require(\n            _seconds <= EXECUTION_DELAY_MAXIMUM,\n            \"Governance::setExecutionDelay: TOO_LARGE\"\n        );\n        executionDelay = _seconds;\n        emit ExecutionDelayChanged(_seconds);\n    }\n\n    function setQuorumVotes(uint256 _votes) public onlyOwner {\n        require(\n            _votes >= QUORUM_VOTES_MINIMUM,\n            \"Governance::setQuorumVotes: TOO_SMALL\"\n        );\n        require(\n            _votes <= QUORUM_VOTES_MAXIMUM,\n            \"Governance::setQuorumVotes: TOO_LARGE\"\n        );\n        quorumVotes = _votes;\n        emit QuorumVotesChanges(_votes);\n    }\n\n    function setProposalThreshold(uint256 _votes) public onlyOwner {\n        require(\n            _votes >= PROPOSAL_THRESHOLD_MINIMUM,\n            \"Governance::setProposalThreshold: TOO_SMALL\"\n        );\n        require(\n            _votes <= PROPOSAL_THRESHOLD_MAXIMUM,\n            \"Governance::setProposalThreshold: TOO_LARGE\"\n        );\n        proposalThreshold = _votes;\n        emit ProposalThresholdChanged(_votes);\n    }\n\n    /// @notice View the current status of any proposal\n    /// @param _proposalId the index of the proposal we wish to view the State of\n    /// @return ProposalState enum representing the status of the selected proposal\n    function state(uint256 _proposalId) public view returns (ProposalState) {\n        require(\n            _proposalId < proposalCount,\n            \"Governance::state: invalid proposal id\"\n        );\n\n        Proposal memory proposal = proposals[_proposalId];\n\n        // These states are each being a precondition of the next state\n\n        // The proposal is currently allowing votes\n        if (block.timestamp <= proposal.startTime + proposal.votingPeriod) {\n            return ProposalState.Active;\n        }\n\n        // The proposal is no longer allowing votes and has been executed\n        if (proposal.executor != address(0)) {\n            return ProposalState.Executed;\n        }\n\n        // The proposal is yes/no and the yes votes did not exceed the no votes, or the yes notes did not exceed quorum\n        if (proposal.isBoolean && (proposal.votes[1] <= proposal.votes[0] || proposal.votes[1] < proposal.quorumVotes)) {\n            return ProposalState.Defeated;\n        }\n\n        // The proposal is multiple choice and none of the choices exceeded quorum\n        if (!proposal.isBoolean) {\n            bool multipleChoiceDefeated = true;\n            for (uint256 i = 0; i < proposal.votes.length; ++i) {\n                if (proposal.votes[i] >= proposal.quorumVotes) {\n                    multipleChoiceDefeated = false;\n                }\n            }\n            if (multipleChoiceDefeated) {\n                return ProposalState.Defeated;\n            }\n        }\n\n        // We are still in the execution delay window\n        if (block.timestamp < proposal.startTime + proposal.votingPeriod + proposal.executionDelay) {\n            return ProposalState.PendingExecution;\n        }\n\n        // We have not yet exceeded the expiration period\n        if (block.timestamp < proposal.startTime + proposal.votingPeriod + proposal.executionDelay + EXPIRATION_PERIOD) {\n            return ProposalState.ReadyForExecution;\n        }\n\n        // None of the previous conditions were met therefore the proposal has expired\n        return ProposalState.Expired;\n    }\n\n    /// @param _proposalId the index of the proposal we wish to view the receipt for\n    /// @param _voter the user we wish to view the receipt for\n    /// @return Receipt A copy of the voters selection for the provided proposal\n    function getReceipt(uint256 _proposalId, address _voter) public view returns (Receipt memory) {\n        return receipts[_proposalId][_voter];\n    }\n\n    function constructProposalExecutionContexts(string[] calldata _labels, \n                                               address[] calldata _targets, \n                                               uint256[] calldata _values, \n                                               bytes[] calldata _data) \n                                               public pure returns (ProposalExecutionContextList memory) {\n        require(_labels.length == _targets.length && _targets.length == _values.length && _values.length == _data.length, \"!length\");\n        uint256 length = _labels.length;\n        ProposalExecutionContextList memory list;\n        list.length = length;\n        list.contexts = new ProposalExecutionContext[](length);\n            for (uint256 i = 0; i < length; ++i) {\n                ProposalExecutionContext memory newProposalExecutionContext = ProposalExecutionContext({\n                    label: _labels[i],\n                    target: _targets[i],\n                    value: _values[i],\n                    data: _data[i]\n                });\n\n                list.contexts[i] = newProposalExecutionContext;\n            }\n        return list;\n    }\n\n    function constructProposalMetadata(string calldata _title, \n                                       string calldata _metadata, \n                                       uint256 _votingPeriod, \n                                       bool _isBoolean) \n                                       public pure returns (Proposal memory) {\n        Proposal memory metaData;\n        metaData.title = _title;\n        metaData.metadata = _metadata;\n        metaData.votingPeriod = _votingPeriod;\n        metaData.isBoolean = _isBoolean;\n        return metaData;\n    }\n\n    /// @notice Allows any user with sufficient priviledges to propose a new vote\n    /// @param _metaData Metadata struct generated via constructProposalMetadata\n    /// @param _executionContexts Execution struct generated via constructExecutionContexts\n    function propose(\n        Proposal memory _metaData,\n        ProposalExecutionContextList memory _executionContexts\n    ) public  {\n        require(_executionContexts.length == _executionContexts.contexts.length,\n            \"Governance::propose: Malformed execution contexts list\"\n        );\n\n        require(\n            _metaData.votingPeriod >= minimumVotingPeriod,\n            \"Governance::propose: voting period too short\"\n        );\n\n        require(\n            _metaData.votingPeriod <= VOTING_PERIOD_MAXIMUM,\n            \"Governance::propose: voting period too long\"\n        );\n\n        uint256 lastProposalId = lastProposalByAddress[msg.sender];\n\n        // Prevent the same person from having concurrent proposals\n        if (lastProposalId > 0) {\n            ProposalState proposalState = state(lastProposalId);\n            require(\n                proposalState == ProposalState.Executed ||\n                proposalState == ProposalState.Defeated ||\n                proposalState == ProposalState.Expired,\n                \"Governance::propose: proposer already has a proposal in progress\"\n            );\n        }\n\n        uint256 votes = sAXIAL.balanceOf(msg.sender);\n\n        // user needs to have enough voting power to be allowed to propose\n        require(\n            votes > proposalThreshold,\n            \"Governance::propose: proposer votes below proposal threshold\"\n        );\n\n        // Allocate voting options\n        uint256[] memory isMultipleChoice;\n        if (!_metaData.isBoolean) {\n            isMultipleChoice = new uint256[](_executionContexts.length);\n        } else {\n            isMultipleChoice = new uint256[](2); // 0: No, 1: Yes\n        }\n\n        Proposal storage newProposal = proposals[proposalCount];\n        // newProposal.votes = new uint256[](0);\n\n        // if (!_metaData.isBoolean) {\n        //     for (uint256 i = 0; i < _executionContexts.length; ++i) {\n        //         newProposal.votes.push(0); // A, B, C ...\n        //     }\n        // } else {\n        //     newProposal.votes.push(0); // No\n        //     newProposal.votes.push(0); // Yes\n        // }\n\n        newProposal.title = _metaData.title;\n        newProposal.metadata = _metaData.metadata;\n        newProposal.proposer = msg.sender;\n        newProposal.executor = address(0);\n        newProposal.startTime = block.timestamp;\n        newProposal.votingPeriod = _metaData.votingPeriod;\n        newProposal.quorumVotes = quorumVotes;\n        newProposal.executionDelay = executionDelay;\n        newProposal.votes = isMultipleChoice;\n        newProposal.isBoolean = _metaData.isBoolean;\n        for (uint256 i = 0; i < _executionContexts.length; ++i) {\n            newProposal.executionContexts.contexts.push(_executionContexts.contexts[i]);\n        }\n        newProposal.executionContexts.length = _executionContexts.length;\n\n\n        //Save new proposal to state\n        //proposals[proposalCount] = newProposal;\n        lastProposalByAddress[msg.sender] = proposalCount;\n\n        ++proposalCount;\n\n        emit ProposalCreated(proposalCount, newProposal.proposer, newProposal.title);\n    }\n\n    /// @notice Vote for selected option\n    /// @param _proposalId the index of the proposal the user wishes to vote for or against\n    /// @param _support index of the option the user wishes to cast their vote for\n    /// @dev If the proposal is binary, 0 means No and 1 means Yes\n    function vote(uint256 _proposalId, uint256 _support) public nonReentrant {\n        require(\n            state(_proposalId) == ProposalState.Active,\n            \"Governance::vote: voting is closed\"\n        );\n\n        // directly talk to state memory\n        Proposal storage proposal = proposals[_proposalId];\n        Receipt storage receipt = receipts[_proposalId][msg.sender];\n\n        uint256 votes = sAXIAL.balanceOf(msg.sender);\n\n        // Remove any previous votes if the user cast them already\n        if (receipt.hasVoted) {\n            proposal.votes[receipt.support] -= receipt.votes;\n        }\n\n        // Increment votes for option user has now selected\n        proposal.votes[_support] += votes;\n\n        // Update users receipt\n        receipt.hasVoted = true;\n        receipt.support = _support;\n        receipt.votes = votes;\n\n        emit NewVote(_proposalId, msg.sender, _support, votes);\n    }\n\n    /// @notice Allow any user to execute the proposal if it is in the execution stage\n    /// @param _proposalId the index of the proposal we wish to execute\n    /// @return bytes array the executed function/s returned\n    function execute(uint256 _proposalId) public payable nonReentrant returns (bytes[] memory) {\n        require(\n            state(_proposalId) == ProposalState.ReadyForExecution,\n            \"Governance::execute: cannot be executed\"\n        );\n\n        Proposal storage proposal = proposals[_proposalId];\n\n        ProposalExecutionContextList storage proposalExecution = proposal.executionContexts;\n\n        bytes[] memory returnDatas;\n\n        // If yes/no options were given, execute all\n        if (proposal.isBoolean) {\n            returnDatas = new bytes[](proposalExecution.length);\n            for (uint256 i = 0; i < proposalExecution.length; ++i) {\n                (bool success, bytes memory returnData) = proposalExecution.contexts[i].target.call{\n                                                   value: proposalExecution.contexts[i].value}(\n                                                          proposalExecution.contexts[i].data);\n                require(\n                    success,\n                    \"Governance::execute: transaction execution reverted.\"\n                );\n                returnDatas[i] = returnData;\n            }\n        } else {\n            // If multiple choice, execute the option with the most votes\n            returnDatas = new bytes[](1);\n            uint256 contextToExecute = 0;\n            uint256 maxVotes = proposal.quorumVotes;\n            for (uint256 i = 0; i < proposal.votes.length; ++i) {\n                if (proposal.votes[i] > maxVotes) {\n                    maxVotes = proposal.votes[i];\n                    contextToExecute = i;\n                }\n            }\n            (bool success, bytes memory returnData) = proposalExecution.contexts[contextToExecute].target.call{\n                                               value: proposalExecution.contexts[contextToExecute].value}(\n                                                      proposalExecution.contexts[contextToExecute].data);\n            require(\n                success,\n                \"Governance::execute: transaction execution reverted.\"\n            );\n            returnDatas[0] = returnData;\n        }\n\n        proposal.executor = msg.sender;\n\n        emit ProposalExecuted(_proposalId, proposal.executor);\n\n        return returnDatas;\n    }\n}"
    },
    "contracts/test/ERC20TokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @notice this contract is being used in order to allow minting during testing\n\ncontract ERC20TokenMock is ERC20, Ownable {\n\n    uint256 public maxSupply = 365_000_000e18; // 365 million Axial\n\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        require(totalSupply() + _amount <= maxSupply, \"mint: cannot exceed max supply\");\n        _mint(_to, _amount);\n        //_moveDelegates(address(0), _delegates[_to], _amount);\n    }\n\n  function mints(address[] memory tos, uint256[] memory amount) external {\n    for (uint i = 0; i < tos.length; i++) {\n      mint(tos[i], amount[i]);\n    }\n  }\n}\n"
    },
    "contracts/StakedAxialToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title Axial staking contract with extendable linear decay\n/// @author Auroter\n/// @dev See also VestingStake.sol\n\nimport \"./VestingStake.sol\";\n\ncontract StakedAxialToken is VestingStake {\n    //address constant private AxialTokenAddress = 0xcF8419A615c57511807236751c0AF38Db4ba3351;\n    string constant private GovernanceTokenName = \"StakedAxialToken\";\n    string constant private GovernanceTokenSymbol = \"sAXIAL\";\n    address constant private OwnerAddress = 0xfdCcf6D49A29f435E509DFFAAFDecB0ADD93f8C0;\n\n    /// @notice Constructor\n    constructor(address _AxialTokenAddress) VestingStake(_AxialTokenAddress, GovernanceTokenName, GovernanceTokenSymbol, OwnerAddress) {}\n}"
    },
    "contracts/Equity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\n/// @title Equity management contract with lockouts\n/// @author Auroter\n/// @notice Allows you to allocate equity for users\n/// @notice Equity pool can be expanded over time\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract EquityStake is Ownable {\n    using SafeERC20 for IERC20;\n\n    // Info pertaining to staking contract\n    address[] public stakedTokens; // ERC20 tokens to be staked (i.e. Axial)\n    mapping(address => uint256) numTokens; // Balance of staked tokens, token => balance\n    uint256 unallocatedPercentage = 100; // Percentage of unallocated equity\n    string public name; // Equity asset name (i.e. eAxial)\n    string public symbol; // Equity asset symbol (i.e. eAXIAL)\n    uint256 private interpolationGranularity = 1e18; // Note: ERC20.decimals() is for display and does not affect arithmetic!\n\n    // Info pertaining to users\n    address[] private users; // An array containing all user addresses\n    mapping(address => Lock) private locks; // A mapping of each users lock\n\n    // Lock structure, only one of these is allowed per user\n    struct Lock {\n        uint256 startBlockTime;\n        uint256 endBlockTime;\n        uint256 percentEquity;\n        bool initialized;\n    }\n\n    /// @notice Constructor\n    /// @param _name Desired name of our equity token\n    /// @param _symbol Desired symbol of our equity token\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _governance\n    ) {\n        transferOwnership(_governance);\n        name = _name;\n        symbol = _symbol;\n    }\n\n    /// @notice Emitted when a user is given equity\n    /// @param user Address of the user who was given equity\n    /// @param percent percentage of equity given\n    /// @param duration Length in seconds of lockout\n    event equityAwarded(address indexed user, uint256 percent, uint256 duration);\n\n    /// @notice Emitted when equity is deposited into the contract\n    /// @param token Address of staked token\n    /// @param amount New total quantity of tokens in stake\n    event equityDeposited(address indexed token, uint256 amount);\n\n    /// @notice Emitted when a user claims their equity tokens\n    /// @param user Address of the user who claimed\n    /// @param token Address of the claimed token\n    /// @param amount Quantity of tokens claimed\n    event equityClaimed(address indexed user, address indexed token, uint256 amount);\n\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\n    /// @notice Some users may have accidentally sent these to the contract\n    /// @param _token Address of the non-deposit token\n    /// @dev Always ensure the _token is legitimate before calling this\n    /// @dev A bad token can mimic safetransfer or balanceof with a nocive function\n    /// @dev If tokens were accidentally sent directly to the contract they can also be removed\n    function ownerRemoveNonDepositToken(address _token) public onlyOwner {\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\n        require(numTokens[_token] < balanceOfToken, \"Token was not accidentally sent to this contract\");\n        uint256 toWithdraw = balanceOfToken - numTokens[_token];\n        require(toWithdraw > 0, \"!balance\");\n        IERC20(_token).safeTransfer(owner(), toWithdraw);\n    }\n\n    /// @notice Compute the number of seconds in a week\n    /// @notice useful for awarding equity\n    /// @param _weeks the number of weeks to convert into seconds\n    /// @return _weeks represented in seconds\n    function getWeeksInSeconds(uint256 _weeks) external pure returns (uint256) {\n        return 60 * 60 * 24 * 7 * _weeks;\n    }\n\n    /// @notice Allocate equity share for a user\\\n    /// @param _user the user we wish to allocate equity for\n    /// @param _percent the percent share we wish to *add* for the user\n    /// @param _lockDuration time the user has to wait before they can claim their equity\n    function awardEquity(address _user, uint256 _percent, uint256 _lockDuration) public onlyOwner {\n        require(_percent > 0, \"Cannot allocate 0\");\n        require(unallocatedPercentage <= _percent, \"Not enough equity available\");\n        unallocatedPercentage -= _percent;\n\n        uint256 currentTime = block.timestamp;\n\n        Lock memory lock = locks[_user];\n        if (!lock.initialized) {\n            lock.initialized = true;\n            lock.startBlockTime = currentTime;\n        } else {\n            require(lock.startBlockTime + _lockDuration >= lock.endBlockTime, \"Cannot shorten lockout\");\n        }\n\n        lock.percentEquity += _percent;\n        lock.endBlockTime = lock.startBlockTime + _lockDuration;\n\n        locks[_user] = lock;\n\n        emit equityAwarded(_user, lock.percentEquity, _lockDuration);\n    }\n\n    /// @notice Deposit any token into the contracts equity pool\n    /// @param _token Address of the token we wish to deposit\n    /// @param _amount quantity of the token we wish to deposit\n    /// @dev Tokens sent directly to this contract will be lost forever.  todo: allow withdrawal of balanceOf tokens not accounted for via this function\n    function depositEquity(address _token, uint256 _amount) public onlyOwner {\n        address userAddr = msg.sender;\n\n        // Receive the tokens\n        require(IERC20(_token).balanceOf(userAddr) >= _amount, \"!balance\");\n        require(IERC20(_token).allowance(userAddr, address(this)) >= _amount, \"!approved\");\n        IERC20(_token).safeTransferFrom(userAddr,  address(this), _amount);\n\n        if (numTokens[_token] == 0) {\n            stakedTokens.push(_token);\n        }\n\n        numTokens[_token] += _amount;\n\n        emit equityDeposited(_token, numTokens[_token]);\n    }\n\n    /// @notice allow the user to claim their equity once their lock has expired\n    function claimEquity() public {\n        address userAddr = msg.sender;\n        Lock storage lock = locks[userAddr];\n        require(lock.initialized, \"User not found\");\n        require(lock.endBlockTime < block.timestamp, \"Equity is still locked\");\n\n        uint256 equity = lock.percentEquity;\n        lock.percentEquity = 0;\n\n        for (uint256 i = 0; i < stakedTokens.length; ++i) {\n            address token = stakedTokens[i];\n            uint256 fundsToClaim = numTokens[token] * equity / 100;\n            IERC20(token).safeTransfer(userAddr, fundsToClaim);\n            emit equityClaimed(userAddr, token, fundsToClaim);\n        }\n\n        unallocatedPercentage += equity;\n    }\n\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}