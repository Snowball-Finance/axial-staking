{
  "address": "0xd5Fe6cC71D3D7e4858092125e4efd6c9Ef8E6032",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "userRestaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "userStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accrued",
          "type": "uint256"
        }
      ],
      "name": "userWithdrew",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddr",
          "type": "address"
        }
      ],
      "name": "getStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAccrued",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "ownerRemoveNonDepositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawMyFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c287b94679fb4411698003187b24093f691e5aa6630496496575a7577ed8751",
  "receipt": {
    "to": null,
    "from": "0x44A4b9E2A69d86BA382a511f845CbF2E31286770",
    "contractAddress": "0xd5Fe6cC71D3D7e4858092125e4efd6c9Ef8E6032",
    "transactionIndex": 0,
    "gasUsed": "1212696",
    "logsBloom": "0x
    "blockHash": "0x01c70a21f6138f7ed5777e8e175d668c588e22a2235905a17f6487b029253b0e",
    "transactionHash": "0x0c287b94679fb4411698003187b24093f691e5aa6630496496575a7577ed8751",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8219430,
        "transactionHash": "0x0c287b94679fb4411698003187b24093f691e5aa6630496496575a7577ed8751",
        "address": "0xd5Fe6cC71D3D7e4858092125e4efd6c9Ef8E6032",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x01c70a21f6138f7ed5777e8e175d668c588e22a2235905a17f6487b029253b0e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 8219430,
        "transactionHash": "0x0c287b94679fb4411698003187b24093f691e5aa6630496496575a7577ed8751",
        "address": "0xd5Fe6cC71D3D7e4858092125e4efd6c9Ef8E6032",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770",
          "0x00000000000000000000000044a4b9e2a69d86ba382a511f845cbf2e31286770"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x01c70a21f6138f7ed5777e8e175d668c588e22a2235905a17f6487b029253b0e"
      }
    ],
    "blockNumber": 8219430,
    "cumulativeGasUsed": "1212696",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x57b8a194230ef402584130B1eD31d2C4682d7a71",
    "veAxial",
    "veAXIAL",
    "0x44A4b9E2A69d86BA382a511f845CbF2E31286770"
  ],
  "numDeployments": 1,
  "solcInputHash": "b789b1f498f002e312f5cab981b445a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"userStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accrued\",\"type\":\"uint256\"}],\"name\":\"userWithdrew\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddr\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"ownerRemoveNonDepositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMyFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"userRestaked(address,uint256)\":{\"params\":{\"amount\":\"Quantity of tokens deposited\",\"user\":\"Address of the user who staked\"}},\"userStaked(address,uint256)\":{\"params\":{\"amount\":\"Quantity of tokens deposited\",\"user\":\"Address of the user who staked\"}},\"userWithdrew(address,uint256,uint256)\":{\"params\":{\"accrued\":\"Quantity of accrued tokens lost\",\"amount\":\"Quantity of tokens withdrawn\",\"user\":\"Address of the user who withdrew\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_governance\":\"Address of wallet which will be given adminstrative access to this contract\",\"_name\":\"Desired name of our governance token\",\"_stakedToken\":\"Address of the token our users will deposit and lock in exchange for governance tokens\",\"_symbol\":\"Desired symbol of our governance token\"}},\"getAccrued(address)\":{\"details\":\"Use this function to get the numerator for a users share of the rewards pool\",\"params\":{\"_userAddr\":\"Address of any user to view the number of vested tokens they have not yet claimed\"},\"returns\":{\"_0\":\"Quantity of tokens which a user has accrued over time\"}},\"getAllUsers()\":{\"returns\":{\"_0\":\"An array of addresses of all users who have ever staked\"}},\"getStaked(address)\":{\"params\":{\"_userAddr\":\"Address of any user to view the number of vested tokens they have not yet claimed\"},\"returns\":{\"_0\":\"Quantity of tokens which a user currently has staked\"}},\"getTotalAccrued()\":{\"details\":\"Use this function to get the denominator for a users share of the rewards pool\",\"returns\":{\"_0\":\"Quantity of all tokens awarded by this contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerRemoveNonDepositToken(address)\":{\"details\":\"Always ensure the _token is legitimate before calling thisA bad token can mimic safetransfer or balanceof with a nocive function\",\"params\":{\"_token\":\"Address of the non-deposit token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint256)\":{\"params\":{\"_amount\":\"Number of tokens to deposit\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawMyFunds()\":{\"details\":\"This could be called by the web application via a button or some other means\"}},\"version\":1},\"userdoc\":{\"events\":{\"userRestaked(address,uint256)\":{\"notice\":\"Emitted when a user adds to their stake\"},\"userStaked(address,uint256)\":{\"notice\":\"Emitted when a user creates a new stake\"},\"userWithdrew(address,uint256,uint256)\":{\"notice\":\"Emitted when a user withdraws their funds\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"getAccrued(address)\":{\"notice\":\"Get the total number of tokens a user has accrued\"},\"getAllUsers()\":{\"notice\":\"Retrieve a list of all users who have ever staked\"},\"getStaked(address)\":{\"notice\":\"Get the number of tokens a user currently has staked\"},\"getTotalAccrued()\":{\"notice\":\"Get the total number of tokens accrued via this contract\"},\"ownerRemoveNonDepositToken(address)\":{\"notice\":\"Allow owner to reclaim tokens not matching the deposit tokenSome users may have accidentally sent these to the contract\"},\"stake(uint256)\":{\"notice\":\"Deposit tokens into the contract, adjusting accrual rate\"},\"withdrawMyFunds()\":{\"notice\":\"Transfers deposited tokens back to their original ownerThis will reset the users accrual!\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AccruingStake.sol\":\"AccruingStake\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/AccruingStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title A staking contract which accrues over time based on the amount staked\\n/// @author Auroter\\n/// @notice Allows you to lock tokens in exchange for distribution tokens\\n/// @notice Locks can be deposited into or closed\\n/// @dev Simply call stake(...) to deposit tokens\\n/// @dev Call getAccrued(user) / getTotalAccrued() = users share\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract AccruingStake is ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    // Info pertaining to staking contract\\n    address public stakedToken; // An ERC20 Token to be staked (i.e. Axial)\\n    string public name; // New asset after staking (i.e. veAxial)\\n    string public symbol; // New asset symbol after staking (i.e. veAXIAL)\\n    //uint256 private AprDenominator = 1 days;  // Timeframe it takes for the user to accrue X tokens\\n\\n    // Info pertaining to users\\n    uint256 private totalTokensLocked; // Total balance of tokens users have locked\\n    uint256 private totalTokensAccrued; // Total balance of accrued tokens currently awarded to users\\n    uint256 private lastUserIndexUpdated; // Index of the user whose accrual was most recently updated\\n    uint256 private timeStamp; // Last time Total Accrual was updated\\n    address[] private users; // An array containing all user addresses\\n    mapping(address => AccrueVe) private locks; // A mapping of each users tokens staked\\n\\n    struct AccrueVe {\\n        uint256 accruedTokens; // Quantity of tokens awarded to the user at time of Timestamp\\n        uint256 stakedTokens; // Quantity of tokens the user has staked\\n        uint256 timeStamp; // Last time the accrual was updated\\n        uint256 userIndex; // Index of user, used to manage iteration\\n        bool initialized; // True if the user is staked\\n    }\\n\\n    /// @notice Constructor\\n    /// @param _stakedToken Address of the token our users will deposit and lock in exchange for governance tokens\\n    /// @param _name Desired name of our governance token\\n    /// @param _symbol Desired symbol of our governance token\\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\\n    constructor(\\n        address _stakedToken,\\n        string memory _name,\\n        string memory _symbol,\\n        address _governance\\n    ) {\\n        transferOwnership(_governance);\\n        stakedToken = _stakedToken;\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /// @notice Emitted when a user creates a new stake\\n    /// @param user Address of the user who staked\\n    /// @param amount Quantity of tokens deposited\\n    event userStaked(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when a user adds to their stake\\n    /// @param user Address of the user who staked\\n    /// @param amount Quantity of tokens deposited\\n    event userRestaked(address indexed user, uint256 amount);\\n\\n    /// @notice Emitted when a user withdraws their funds\\n    /// @param user Address of the user who withdrew\\n    /// @param amount Quantity of tokens withdrawn\\n    /// @param accrued Quantity of accrued tokens lost\\n    event userWithdrew(address indexed user, uint256 amount, uint256 accrued);\\n\\n    /// @notice Get the number of tokens a user currently has staked\\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\\n    /// @return Quantity of tokens which a user currently has staked\\n    function getStaked(address _userAddr) public view returns (uint256) {\\n        return locks[_userAddr].stakedTokens;\\n    }\\n\\n    /// @notice Get the total number of tokens a user has accrued\\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\\n    /// @return Quantity of tokens which a user has accrued over time\\n    /// @dev Use this function to get the numerator for a users share of the rewards pool\\n    function getAccrued(address _userAddr) public view returns (uint256) {\\n        //return Locks[_userAddr].AccruedTokens;\\n        return locks[_userAddr].accruedTokens + (locks[_userAddr].stakedTokens * (block.timestamp - locks[_userAddr].timeStamp));\\n    }\\n\\n    /// @notice Get the total number of tokens accrued via this contract\\n    /// @return Quantity of all tokens awarded by this contract\\n    /// @dev Use this function to get the denominator for a users share of the rewards pool\\n    function getTotalAccrued() public view returns (uint256) {\\n        return totalTokensAccrued + (totalTokensLocked * (block.timestamp - timeStamp));\\n    }\\n\\n    /// @notice Retrieve a list of all users who have ever staked\\n    /// @return An array of addresses of all users who have ever staked\\n    function getAllUsers() public view returns (address[] memory) {\\n        return users;\\n    }\\n\\n    // Accrual is tokens locked * seconds\\n    /// @notice Update the accrual for a specific user\\n    /// @param _userAddr address of user to update\\n    /// @dev This synchronizes a users accrual when their deposit amount changes\\n    function _updateUsersAccrual(address _userAddr) private {\\n        AccrueVe storage lock = locks[_userAddr];\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        uint256 accrual = (blockTimestamp - lock.timeStamp) * lock.stakedTokens;\\n\\n        lock.timeStamp = blockTimestamp;\\n        lock.accruedTokens += accrual;\\n    }\\n\\n    /// @notice Update the total accrual for all users\\n    /// @dev This updates the value used as the denominator for a users accrual share\\n    /// @dev This must always be called before changing the amount of tokens deposited in this contract\\n    function _updateTotalAccrual() private {\\n        uint256 currentTime = block.timestamp;\\n        uint256 delta = currentTime - timeStamp;\\n        totalTokensAccrued += totalTokensLocked * delta;\\n        timeStamp = currentTime;\\n    }\\n\\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\\n    /// @notice Some users may have accidentally sent these to the contract\\n    /// @param _token Address of the non-deposit token\\n    /// @dev Always ensure the _token is legitimate before calling this\\n    /// @dev A bad token can mimic safetransfer or balanceof with a nocive function\\n    function ownerRemoveNonDepositToken(address _token) public nonReentrant onlyOwner {\\n        require(_token != stakedToken, \\\"!invalid\\\");\\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\\n        require(balanceOfToken > 0, \\\"!balance\\\");\\n        IERC20(_token).safeTransfer(owner(), balanceOfToken);\\n    }\\n\\n    /// @notice Transfers deposited tokens back to their original owner\\n    /// @notice This will reset the users accrual!\\n    /// @dev This could be called by the web application via a button or some other means\\n    function withdrawMyFunds() external nonReentrant {\\n        address userAddr = msg.sender;\\n        uint256 fundsToClaim = locks[userAddr].stakedTokens;\\n\\n        require(fundsToClaim > 0, \\\"!funds\\\");\\n        IERC20(stakedToken).safeTransfer(userAddr, fundsToClaim);\\n\\n        // decrement totals\\n        _updateTotalAccrual();\\n        totalTokensLocked -= fundsToClaim;\\n        totalTokensAccrued -= locks[userAddr].accruedTokens;\\n\\n        // Broadcast withdrawal\\n        emit userWithdrew(userAddr, fundsToClaim, locks[userAddr].accruedTokens);\\n\\n        locks[userAddr].stakedTokens = 0;\\n        locks[userAddr].accruedTokens = 0;\\n        locks[userAddr].initialized = false;\\n\\n        // Fairly efficient way of removing user from list\\n        uint256 lastUsersIndex = users.length - 1;\\n        uint256 myIndex = locks[userAddr].userIndex;\\n        locks[users[lastUsersIndex]].userIndex = myIndex;\\n        users[myIndex] = users[lastUsersIndex];\\n        users.pop();\\n    }\\n\\n    /// @notice Deposit tokens into the contract, adjusting accrual rate\\n    /// @param _amount Number of tokens to deposit\\n    function stake(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"!amount\\\");\\n\\n        address userAddr = msg.sender;\\n\\n        // Receive the users tokens\\n        require(IERC20(stakedToken).balanceOf(userAddr) >= _amount, \\\"!balance\\\");\\n        require(IERC20(stakedToken).allowance(userAddr, address(this)) >= _amount, \\\"!approved\\\");\\n        IERC20(stakedToken).safeTransferFrom(userAddr, address(this), _amount);\\n\\n        _updateTotalAccrual();\\n        totalTokensLocked += _amount;\\n\\n        // Keep track of new users\\n        if (!locks[userAddr].initialized) {\\n            users.push(userAddr);\\n            locks[userAddr].initialized = true;\\n            locks[userAddr].timeStamp = block.timestamp; // begin accrual from time of initial deposit\\n            locks[userAddr].userIndex = users.length - 1;\\n            emit userStaked(userAddr, _amount);\\n        } else {\\n            _updateUsersAccrual(userAddr); // balance ledger before accrual rate is increased\\n            emit userRestaked(userAddr, _amount);\\n        }\\n\\n        // Update balance\\n        locks[userAddr].stakedTokens += _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x136a57f1dfb6b1dcc8c87fbda66d101daf4dcd9562058e1db9d274db8da7fb72\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806395d89b411161008c578063cc7a262e11610066578063cc7a262e146101a4578063e2842d79146101b7578063e7812b7f146101cc578063f2fde38b146101d457600080fd5b806395d89b41146101765780639869e1371461017e578063a694fc3a1461019157600080fd5b806306fdde03146100d4578063204552b0146100f2578063399080ec146101075780634935e74014610141578063715018a6146101495780638da5cb5b14610151575b600080fd5b6100dc6101e7565b6040516100e99190611007565b60405180910390f35b61010561010036600461103a565b610275565b005b61013361011536600461103a565b6001600160a01b03166000908152600a602052604090206001015490565b6040519081526020016100e9565b6101056103ff565b610105610677565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100e9565b6100dc6106ad565b61013361018c36600461103a565b6106ba565b61010561019f366004611063565b61072f565b60025461015e906001600160a01b031681565b6101bf610abd565b6040516100e9919061107c565b610133610b1f565b6101056101e236600461103a565b610b4e565b600380546101f4906110c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610220906110c9565b801561026d5780601f106102425761010080835404028352916020019161026d565b820191906000526020600020905b81548152906001019060200180831161025057829003601f168201915b505050505081565b600260005414156102a15760405162461bcd60e51b815260040161029890611104565b60405180910390fd5b60026000556001546001600160a01b031633146102d05760405162461bcd60e51b81526004016102989061113b565b6002546001600160a01b03828116911614156103195760405162461bcd60e51b8152602060048201526008602482015267085a5b9d985b1a5960c21b6044820152606401610298565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b15801561035b57600080fd5b505afa15801561036f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103939190611170565b9050600081116103d05760405162461bcd60e51b81526020600482015260086024820152672162616c616e636560c01b6044820152606401610298565b6103f66103e56001546001600160a01b031690565b6001600160a01b0384169083610be9565b50506001600055565b600260005414156104225760405162461bcd60e51b815260040161029890611104565b6002600090815533808252600a602052604090912060010154806104715760405162461bcd60e51b81526020600482015260066024820152652166756e647360d01b6044820152606401610298565b600254610488906001600160a01b03168383610be9565b610490610c51565b80600560008282546104a2919061119f565b90915550506001600160a01b0382166000908152600a602052604081205460068054919290916104d390849061119f565b90915550506001600160a01b0382166000818152600a6020908152604091829020548251858152918201527f864bae816c352dd0f39c724fcc304bc99b54106f6c99497e90ce84dc770831d6910160405180910390a26001600160a01b0382166000908152600a6020526040812060018082018390558282556004909101805460ff19169055600954610566919061119f565b6001600160a01b0384166000908152600a6020819052604082206003015460098054949550909384939190869081106105a1576105a16111b6565b60009182526020808320909101546001600160a01b0316835282019290925260400190206003015560098054839081106105dd576105dd6111b6565b600091825260209091200154600980546001600160a01b039092169183908110610609576106096111b6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506009805480610648576106486111cc565b600082815260208120820160001990810180546001600160a01b03191690559091019091556001905550505050565b6001546001600160a01b031633146106a15760405162461bcd60e51b81526004016102989061113b565b6106ab6000610c8f565b565b600480546101f4906110c9565b6001600160a01b0381166000908152600a60205260408120600201546106e0904261119f565b6001600160a01b0383166000908152600a602052604090206001015461070691906111e2565b6001600160a01b0383166000908152600a60205260409020546107299190611201565b92915050565b600260005414156107525760405162461bcd60e51b815260040161029890611104565b60026000558061078e5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b6044820152606401610298565b6002546040516370a0823160e01b815233600482018190529183916001600160a01b03909116906370a082319060240160206040518083038186803b1580156107d657600080fd5b505afa1580156107ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080e9190611170565b10156108475760405162461bcd60e51b81526020600482015260086024820152672162616c616e636560c01b6044820152606401610298565b600254604051636eb1769f60e11b81526001600160a01b0383811660048301523060248301528492169063dd62ed3e9060440160206040518083038186803b15801561089257600080fd5b505afa1580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190611170565b10156109045760405162461bcd60e51b815260206004820152600960248201526808585c1c1c9bdd995960ba1b6044820152606401610298565b60025461091c906001600160a01b0316823085610ce1565b610924610c51565b81600560008282546109369190611201565b90915550506001600160a01b0381166000908152600a602052604090206004015460ff16610a375760098054600180820183557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90910180546001600160a01b0319166001600160a01b0385169081179091556000908152600a6020526040902060048101805460ff1916831790554260029091015590546109d8919061119f565b6001600160a01b0382166000818152600a6020526040908190206003019290925590517fa39b21532db16adc6c236cfb236c5f7e1af396da67b382e207d4bb9199b1401290610a2a9085815260200190565b60405180910390a2610a84565b610a4081610d1f565b806001600160a01b03167f8d26cd0b1b971201238d682ee1b737ce8953268f8b60a3986ddbf8dba3d47b4583604051610a7b91815260200190565b60405180910390a25b6001600160a01b0381166000908152600a602052604081206001018054849290610aaf908490611201565b909155505060016000555050565b60606009805480602002602001604051908101604052809291908181526020018280548015610b1557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610af7575b5050505050905090565b600060085442610b2f919061119f565b600554610b3c91906111e2565b600654610b499190611201565b905090565b6001546001600160a01b03163314610b785760405162461bcd60e51b81526004016102989061113b565b6001600160a01b038116610bdd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610298565b610be681610c8f565b50565b6040516001600160a01b038316602482015260448101829052610c4c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610d86565b505050565b6008544290600090610c63908361119f565b905080600554610c7391906111e2565b60066000828254610c849190611201565b909155505050600855565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610d199085906323b872dd60e01b90608401610c15565b50505050565b6001600160a01b0381166000908152600a602052604081206001810154600282015491924292909190610d52908461119f565b610d5c91906111e2565b905081836002018190555080836000016000828254610d7b9190611201565b909155505050505050565b6000610ddb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e589092919063ffffffff16565b805190915015610c4c5780806020019051810190610df99190611219565b610c4c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610298565b6060610e678484600085610e71565b90505b9392505050565b606082471015610ed25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610298565b6001600160a01b0385163b610f295760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610298565b600080866001600160a01b03168587604051610f45919061123b565b60006040518083038185875af1925050503d8060008114610f82576040519150601f19603f3d011682016040523d82523d6000602084013e610f87565b606091505b5091509150610f97828286610fa2565b979650505050505050565b60608315610fb1575081610e6a565b825115610fc15782518084602001fd5b8160405162461bcd60e51b81526004016102989190611007565b60005b83811015610ff6578181015183820152602001610fde565b83811115610d195750506000910152565b6020815260008251806020840152611026816040850160208701610fdb565b601f01601f19169190910160400192915050565b60006020828403121561104c57600080fd5b81356001600160a01b0381168114610e6a57600080fd5b60006020828403121561107557600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156110bd5783516001600160a01b031683529284019291840191600101611098565b50909695505050505050565b600181811c908216806110dd57607f821691505b602082108114156110fe57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561118257600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156111b1576111b1611189565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60008160001904831182151516156111fc576111fc611189565b500290565b6000821982111561121457611214611189565b500190565b60006020828403121561122b57600080fd5b81518015158114610e6a57600080fd5b6000825161124d818460208701610fdb565b919091019291505056fea2646970667358221220a16536ec2e6deccc1704a7a66b025c55ac441aad20824aac52c8944bd4f2507064736f6c63430008090033",
  "devdoc": {
    "events": {
      "userRestaked(address,uint256)": {
        "params": {
          "amount": "Quantity of tokens deposited",
          "user": "Address of the user who staked"
        }
      },
      "userStaked(address,uint256)": {
        "params": {
          "amount": "Quantity of tokens deposited",
          "user": "Address of the user who staked"
        }
      },
      "userWithdrew(address,uint256,uint256)": {
        "params": {
          "accrued": "Quantity of accrued tokens lost",
          "amount": "Quantity of tokens withdrawn",
          "user": "Address of the user who withdrew"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_governance": "Address of wallet which will be given adminstrative access to this contract",
          "_name": "Desired name of our governance token",
          "_stakedToken": "Address of the token our users will deposit and lock in exchange for governance tokens",
          "_symbol": "Desired symbol of our governance token"
        }
      },
      "getAccrued(address)": {
        "details": "Use this function to get the numerator for a users share of the rewards pool",
        "params": {
          "_userAddr": "Address of any user to view the number of vested tokens they have not yet claimed"
        },
        "returns": {
          "_0": "Quantity of tokens which a user has accrued over time"
        }
      },
      "getAllUsers()": {
        "returns": {
          "_0": "An array of addresses of all users who have ever staked"
        }
      },
      "getStaked(address)": {
        "params": {
          "_userAddr": "Address of any user to view the number of vested tokens they have not yet claimed"
        },
        "returns": {
          "_0": "Quantity of tokens which a user currently has staked"
        }
      },
      "getTotalAccrued()": {
        "details": "Use this function to get the denominator for a users share of the rewards pool",
        "returns": {
          "_0": "Quantity of all tokens awarded by this contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerRemoveNonDepositToken(address)": {
        "details": "Always ensure the _token is legitimate before calling thisA bad token can mimic safetransfer or balanceof with a nocive function",
        "params": {
          "_token": "Address of the non-deposit token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint256)": {
        "params": {
          "_amount": "Number of tokens to deposit"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawMyFunds()": {
        "details": "This could be called by the web application via a button or some other means"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "userRestaked(address,uint256)": {
        "notice": "Emitted when a user adds to their stake"
      },
      "userStaked(address,uint256)": {
        "notice": "Emitted when a user creates a new stake"
      },
      "userWithdrew(address,uint256,uint256)": {
        "notice": "Emitted when a user withdraws their funds"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "getAccrued(address)": {
        "notice": "Get the total number of tokens a user has accrued"
      },
      "getAllUsers()": {
        "notice": "Retrieve a list of all users who have ever staked"
      },
      "getStaked(address)": {
        "notice": "Get the number of tokens a user currently has staked"
      },
      "getTotalAccrued()": {
        "notice": "Get the total number of tokens accrued via this contract"
      },
      "ownerRemoveNonDepositToken(address)": {
        "notice": "Allow owner to reclaim tokens not matching the deposit tokenSome users may have accidentally sent these to the contract"
      },
      "stake(uint256)": {
        "notice": "Deposit tokens into the contract, adjusting accrual rate"
      },
      "withdrawMyFunds()": {
        "notice": "Transfers deposited tokens back to their original ownerThis will reset the users accrual!"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1792,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "stakedToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1794,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1796,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1798,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "totalTokensLocked",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1800,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "totalTokensAccrued",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1802,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "lastUserIndexUpdated",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1804,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "timeStamp",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1807,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "users",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1812,
        "contract": "contracts/AccruingStake.sol:AccruingStake",
        "label": "locks",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(AccrueVe)1823_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(AccrueVe)1823_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AccruingStake.AccrueVe)",
        "numberOfBytes": "32",
        "value": "t_struct(AccrueVe)1823_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AccrueVe)1823_storage": {
        "encoding": "inplace",
        "label": "struct AccruingStake.AccrueVe",
        "members": [
          {
            "astId": 1814,
            "contract": "contracts/AccruingStake.sol:AccruingStake",
            "label": "accruedTokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1816,
            "contract": "contracts/AccruingStake.sol:AccruingStake",
            "label": "stakedTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1818,
            "contract": "contracts/AccruingStake.sol:AccruingStake",
            "label": "timeStamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1820,
            "contract": "contracts/AccruingStake.sol:AccruingStake",
            "label": "userIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1822,
            "contract": "contracts/AccruingStake.sol:AccruingStake",
            "label": "initialized",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}