{
  "address": "0x3d09A80369071E6AC91634e0Bf889EE54Dd510C6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_axial",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_saxial",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veaxial",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Axial",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DISTRIBUTION_DEADLINE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MCAV2",
      "outputs": [
        {
          "internalType": "contract IMasterChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        }
      ],
      "name": "addDeployer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "axialDummyToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deployers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositDummyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deprecateGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deprecated",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "length",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "migrateGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "preDistribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_deployer",
          "type": "address"
        }
      ],
      "name": "removeDeployer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "renewGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sAxial",
      "outputs": [
        {
          "internalType": "contract VestingStake",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterChef",
          "type": "address"
        }
      ],
      "name": "setMasterChef",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "setPID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veAxial",
      "outputs": [
        {
          "internalType": "contract AccruingStake",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokenVote",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd99d157c465c4c5230473c7ae3819775c3015d10ff0bdc9651998eba99d01884",
  "receipt": {
    "to": null,
    "from": "0xF5f08Ba7F46e2a86b5ef3BFD56c2097C9f4276D7",
    "contractAddress": "0x3d09A80369071E6AC91634e0Bf889EE54Dd510C6",
    "transactionIndex": 3,
    "gasUsed": "4590143",
    "logsBloom": "0x00060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400008000000000000000000000000000000000000000000000000020000000000000000000800000002000000000048000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x495102669ac26d10316b412d352a5f815d31e084906099663e8562008564bf4c",
    "transactionHash": "0xd99d157c465c4c5230473c7ae3819775c3015d10ff0bdc9651998eba99d01884",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 15059654,
        "transactionHash": "0xd99d157c465c4c5230473c7ae3819775c3015d10ff0bdc9651998eba99d01884",
        "address": "0x539a33D1243A9F72242386eb98CB148Eb3AF3793",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003d09a80369071e6ac91634e0bf889ee54dd510c6"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 2,
        "blockHash": "0x495102669ac26d10316b412d352a5f815d31e084906099663e8562008564bf4c"
      }
    ],
    "blockNumber": 15059654,
    "cumulativeGasUsed": "5173311",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4980AD7cCB304f7d3c5053Aa1131eD1EDaf48809",
    "0xcF8419A615c57511807236751c0AF38Db4ba3351",
    "0xed7f93C8FD3B96B53c924F601B3948175D2820D8",
    "0x3f563F7efc6dC55adFc1B64BC6Bd4bC5F394c4b2"
  ],
  "numDeployments": 1,
  "solcInputHash": "63cf339e7389bace2f797d461e1a3a10",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_axial\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saxial\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veaxial\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Axial\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISTRIBUTION_DEADLINE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MCAV2\",\"outputs\":[{\"internalType\":\"contract IMasterChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"addDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"axialDummyToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositDummyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deprecateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deprecated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"migrateGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_deployer\",\"type\":\"address\"}],\"name\":\"removeDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"renewGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sAxial\",\"outputs\":[{\"internalType\":\"contract VestingStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterChef\",\"type\":\"address\"}],\"name\":\"setMasterChef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setPID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veAxial\",\"outputs\":[{\"internalType\":\"contract AccruingStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addDeployer(address)\":{\"details\":\"deployers can call distribute function\"},\"setGovernance(address)\":{\"params\":{\"_governance\":\"new governance address to set\"}},\"vote(address[],uint256[])\":{\"params\":{\"_tokenVote\":\": the array of tokens which will recieve tokens\",\"_weights\":\": the weights to associate with the tokens listed in _tokenVote\"}}},\"stateVariables\":{\"deprecated\":{\"details\":\"token => gauge\"},\"gauges\":{\"details\":\"token -> gauge\"},\"lockedWeights\":{\"details\":\"token => weight\"},\"tokenVote\":{\"details\":\"msg.sender => token\"},\"usedWeights\":{\"details\":\"msg.sender => total voting weight of user\"},\"veAxial\":{\"details\":\"This could be an address instead, as we do not use it other than passing the address to the Gauge constructor\"},\"votes\":{\"details\":\"msg.sender => token => votes\"},\"weights\":{\"details\":\"token => weight\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"Axial()\":{\"notice\":\"the Axial token contraxt\"},\"DISTRIBUTION_DEADLINE()\":{\"notice\":\"max time allowed to pass before distribution (6 hours)\"},\"MCAV2()\":{\"notice\":\"Master Chef Axial V2 contract\"},\"acceptGovernance()\":{\"notice\":\"Allows pendingGovernance to accept their role as governance (protection pattern)\"},\"addDeployer(address)\":{\"notice\":\"adds the specified address to the list of deployers\"},\"addGauge(address)\":{\"notice\":\"Add new token gauge\"},\"axialDummyToken()\":{\"notice\":\"dummy token required for masterchef deposits and withdrawals\"},\"collect()\":{\"notice\":\"Collects AXIAL from MCAV2 for distribution\"},\"depositDummyToken()\":{\"notice\":\"Deposits Axial dummy token into MCAV2\"},\"deprecateGauge(address)\":{\"notice\":\"Deprecate existing gauge\"},\"distribute(uint256,uint256)\":{\"notice\":\"Distribute tokens to gauges\"},\"getGauge(address)\":{\"notice\":\"returns the gauge for the specifi(AccruingStake)\"},\"governance()\":{\"notice\":\"address of the governance contract\"},\"length()\":{\"notice\":\"returns the number of tokens currently being voted on\"},\"migrateGauge(address,address)\":{\"notice\":\"Add existing gauge\"},\"poke(address)\":{\"notice\":\"Adjust _owner's votes according to latest _owner's SAXIAL balance\"},\"preDistribute()\":{\"notice\":\"collect AXIAL and update lock information\"},\"removeDeployer(address)\":{\"notice\":\"removes the specified address from the list of deployers\"},\"renewGauge(address)\":{\"notice\":\"Bring Deprecated gauge back into use\"},\"reset()\":{\"notice\":\"Reset votes of msg.sender to 0\"},\"sAxial()\":{\"notice\":\"token for voting on Axial distribution to pools - SAXIAL\"},\"setGovernance(address)\":{\"notice\":\"Allows governance to change governance (for future upgradability)\"},\"setMasterChef(address)\":{\"notice\":\"Sets new MCAV2 address.  Useful for debugging.\"},\"setPID(uint256)\":{\"notice\":\"Sets MCAV2 PID\"},\"tokens()\":{\"notice\":\"returns the list of tokens that are currently being voted on\"},\"veAxial()\":{\"notice\":\"token to allow boosting rewards - VEAXIAL\"},\"vote(address[],uint256[])\":{\"notice\":\"Vote with SAXIAL on a gauge, removing any previous votes\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GaugeProxy.sol\":\"GaugeProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/AccruingStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @title A staking contract which accrues over time based on the amount staked\\r\\n/// @author Auroter\\r\\n/// @notice Allows you to lock tokens in exchange for distribution tokens\\r\\n/// @notice Locks can be deposited into or closed\\r\\n/// @dev Simply call stake(...) to deposit tokens\\r\\n/// @dev Call getAccrued(user) / getTotalAccrued() = users share\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract AccruingStake is ReentrancyGuard, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info pertaining to staking contract\\r\\n    address public stakedToken; // An ERC20 Token to be staked (i.e. Axial)\\r\\n    string public name; // New asset after staking (i.e. veAxial)\\r\\n    string public symbol; // New asset symbol after staking (i.e. veAXIAL)\\r\\n\\r\\n    // Info pertaining to users\\r\\n    uint256 private totalTokensLocked; // Total balance of tokens users have locked\\r\\n    uint256 private totalTokensAccrued; // Total balance of accrued tokens currently awarded to users\\r\\n    uint256 private lastUserIndexUpdated; // Index of the user whose accrual was most recently updated\\r\\n    uint256 private timeStamp; // Last time Total Accrual was updated\\r\\n    address[] private users; // An array containing all user addresses\\r\\n    mapping(address => AccrueVe) private locks; // A mapping of each users tokens staked\\r\\n\\r\\n    struct AccrueVe {\\r\\n        uint256 accruedTokens; // Quantity of tokens awarded to the user at time of Timestamp\\r\\n        uint256 stakedTokens; // Quantity of tokens the user has staked\\r\\n        uint256 timeStamp; // Last time the accrual was updated\\r\\n        uint256 userIndex; // Index of user, used to manage iteration\\r\\n        bool initialized; // True if the user is staked\\r\\n    }\\r\\n\\r\\n    /// @notice Constructor\\r\\n    /// @param _stakedToken Address of the token our users will deposit and lock in exchange for governance tokens\\r\\n    /// @param _name Desired name of our governance token\\r\\n    /// @param _symbol Desired symbol of our governance token\\r\\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\\r\\n    constructor(\\r\\n        address _stakedToken,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _governance\\r\\n    ) {\\r\\n        transferOwnership(_governance);\\r\\n        stakedToken = _stakedToken;\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /// @notice Emitted when a user creates a new stake\\r\\n    /// @param user Address of the user who staked\\r\\n    /// @param amount Quantity of tokens deposited\\r\\n    event userStaked(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when a user adds to their stake\\r\\n    /// @param user Address of the user who staked\\r\\n    /// @param amount Quantity of tokens deposited\\r\\n    event userRestaked(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Emitted when a user withdraws their funds\\r\\n    /// @param user Address of the user who withdrew\\r\\n    /// @param amount Quantity of tokens withdrawn\\r\\n    /// @param accrued Quantity of accrued tokens lost\\r\\n    event userWithdrew(address indexed user, uint256 amount, uint256 accrued);\\r\\n\\r\\n    /// @notice Get the number of tokens a user currently has staked\\r\\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\\r\\n    /// @return Quantity of tokens which a user currently has staked\\r\\n    function getStaked(address _userAddr) public view returns (uint256) {\\r\\n        return locks[_userAddr].stakedTokens;\\r\\n    }\\r\\n\\r\\n    /// @notice Get the total number of tokens a user has accrued\\r\\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\\r\\n    /// @return Quantity of tokens which a user has accrued over time\\r\\n    /// @dev Use this function to get the numerator for a users share of the rewards pool\\r\\n    function getAccrued(address _userAddr) public view returns (uint256) {\\r\\n        //return Locks[_userAddr].AccruedTokens;\\r\\n        return locks[_userAddr].accruedTokens + (locks[_userAddr].stakedTokens * (block.timestamp - locks[_userAddr].timeStamp));\\r\\n    }\\r\\n\\r\\n    /// @notice Get the total number of tokens accrued via this contract\\r\\n    /// @return Quantity of all tokens awarded by this contract\\r\\n    /// @dev Use this function to get the denominator for a users share of the rewards pool\\r\\n    function getTotalAccrued() public view returns (uint256) {\\r\\n        return totalTokensAccrued + (totalTokensLocked * (block.timestamp - timeStamp));\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieve a list of all users who have ever staked\\r\\n    /// @return An array of addresses of all users who have ever staked\\r\\n    function getAllUsers() public view returns (address[] memory) {\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    // Accrual is tokens locked * seconds\\r\\n    /// @notice Update the accrual for a specific user\\r\\n    /// @param _userAddr address of user to update\\r\\n    /// @dev This synchronizes a users accrual when their deposit amount changes\\r\\n    function _updateUsersAccrual(address _userAddr) private {\\r\\n        AccrueVe storage lock = locks[_userAddr];\\r\\n        uint256 blockTimestamp = block.timestamp;\\r\\n\\r\\n        uint256 accrual = (blockTimestamp - lock.timeStamp) * lock.stakedTokens;\\r\\n\\r\\n        lock.timeStamp = blockTimestamp;\\r\\n        lock.accruedTokens += accrual;\\r\\n    }\\r\\n\\r\\n    /// @notice Update the total accrual for all users\\r\\n    /// @dev This updates the value used as the denominator for a users accrual share\\r\\n    /// @dev This must always be called before changing the amount of tokens deposited in this contract\\r\\n    function _updateTotalAccrual() private {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        uint256 delta = currentTime - timeStamp;\\r\\n        totalTokensAccrued += totalTokensLocked * delta;\\r\\n        timeStamp = currentTime;\\r\\n    }\\r\\n\\r\\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\\r\\n    /// @notice Some users may have accidentally sent these to the contract\\r\\n    /// @param _token Address of the non-deposit token\\r\\n    /// @dev Always ensure the _token is legitimate before calling this\\r\\n    /// @dev A bad token can mimic safetransfer or balanceof with a nocive function\\r\\n    function ownerRemoveNonDepositToken(address _token) public nonReentrant onlyOwner {\\r\\n        require(_token != stakedToken, \\\"!invalid\\\");\\r\\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\\r\\n        require(balanceOfToken > 0, \\\"!balance\\\");\\r\\n        IERC20(_token).safeTransfer(owner(), balanceOfToken);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers deposited tokens back to their original owner\\r\\n    /// @notice This will reset the users accrual!\\r\\n    /// @dev This could be called by the web application via a button or some other means\\r\\n    function withdrawMyFunds() external nonReentrant {\\r\\n        address userAddr = msg.sender;\\r\\n        uint256 fundsToClaim = locks[userAddr].stakedTokens;\\r\\n\\r\\n        require(fundsToClaim > 0, \\\"!funds\\\");\\r\\n        IERC20(stakedToken).safeTransfer(userAddr, fundsToClaim);\\r\\n\\r\\n        // decrement totals\\r\\n        _updateTotalAccrual();\\r\\n        uint256 tokensAccrued = getAccrued(userAddr);\\r\\n        totalTokensLocked -= fundsToClaim;\\r\\n        totalTokensAccrued -= tokensAccrued;\\r\\n\\r\\n        // Broadcast withdrawal\\r\\n        emit userWithdrew(userAddr, fundsToClaim, locks[userAddr].accruedTokens);\\r\\n\\r\\n        locks[userAddr].stakedTokens = 0;\\r\\n        locks[userAddr].accruedTokens = 0;\\r\\n        locks[userAddr].initialized = false;\\r\\n\\r\\n        // Fairly efficient way of removing user from list\\r\\n        uint256 lastUsersIndex = users.length - 1;\\r\\n        uint256 myIndex = locks[userAddr].userIndex;\\r\\n        locks[users[lastUsersIndex]].userIndex = myIndex;\\r\\n        users[myIndex] = users[lastUsersIndex];\\r\\n        users.pop();\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit tokens into the contract, adjusting accrual rate\\r\\n    /// @param _amount Number of tokens to deposit\\r\\n    function stake(uint256 _amount) external nonReentrant {\\r\\n        require(_amount > 0, \\\"!amount\\\");\\r\\n\\r\\n        address userAddr = msg.sender;\\r\\n\\r\\n        // Receive the users tokens\\r\\n        require(IERC20(stakedToken).balanceOf(userAddr) >= _amount, \\\"!balance\\\");\\r\\n        require(IERC20(stakedToken).allowance(userAddr, address(this)) >= _amount, \\\"!approved\\\");\\r\\n        IERC20(stakedToken).safeTransferFrom(userAddr, address(this), _amount);\\r\\n\\r\\n        _updateTotalAccrual();\\r\\n        totalTokensLocked += _amount;\\r\\n\\r\\n        // Keep track of new users\\r\\n        if (!locks[userAddr].initialized) {\\r\\n            users.push(userAddr);\\r\\n            locks[userAddr].initialized = true;\\r\\n            locks[userAddr].timeStamp = block.timestamp; // begin accrual from time of initial deposit\\r\\n            locks[userAddr].userIndex = users.length - 1;\\r\\n            emit userStaked(userAddr, _amount);\\r\\n        } else {\\r\\n            _updateUsersAccrual(userAddr); // balance ledger before accrual rate is increased\\r\\n            emit userRestaked(userAddr, _amount);\\r\\n        }\\r\\n\\r\\n        // Update balance\\r\\n        locks[userAddr].stakedTokens += _amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b39ab9916ed0067d14aad451a8a296d1171bf5b0ec2c61204024426080d6a4b\",\"license\":\"MIT\"},\"contracts/AxialDummyToken.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract AxialDummyToken is ERC20(\\\"AxialDummyToken\\\", \\\"AXD\\\") {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    constructor() {\\r\\n        _mint(msg.sender, 1e18);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x62e037f206bde888fbc8de71e683ea2e291dbbffe61818a9b435b409ff4ed435\",\"license\":\"MIT\"},\"contracts/Gauge.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport {ProtocolGovernance} from \\\"./libraries/ProtocolGovernance.sol\\\";\\r\\nimport {AccruingStake} from \\\"./AccruingStake.sol\\\";\\r\\n\\r\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract Gauge is ProtocolGovernance, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // ==================== External Dependencies ==================== //\\r\\n\\r\\n    /// Token to allow boosting partner token rewards - VEAXIAL\\r\\n    AccruingStake public immutable VEAXIAL;\\r\\n\\r\\n    /// Token to be staked in return for primary rewards\\r\\n    IERC20 public immutable poolToken;\\r\\n\\r\\n    // ==================== Events ==================== //\\r\\n\\r\\n    /// @notice emitted when a user stakes\\r\\n    /// @param user The address of the user who staked\\r\\n    /// @param amount the quantity of tokens the user staked\\r\\n    event Staked(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice emitted when a user withdraws\\r\\n    /// @param user The address of the user who withdrew\\r\\n    /// @param amount The quantity of tokens the user withdrew\\r\\n    event Withdrawn(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice emitted when a reward is claimed by a user\\r\\n    /// @param user The address of the user who claimed the reward\\r\\n    /// @param reward The quantity of tokens the user claimed\\r\\n    /// @param token The address of the token the user claimed\\r\\n    event RewardPaid(address indexed user, uint256 reward, address token);\\r\\n\\r\\n    /// @notice emitted when the primary reward or partner rewards are added to the gauge\\r\\n    /// @param reward the quantity of tokens added\\r\\n    /// @param token the address of the reward token\\r\\n    event RewardAdded(uint256 reward, address token);\\r\\n\\r\\n    // ==================== State Variables ==================== //\\r\\n\\r\\n    /// tokens to be distributed as a reward to stakers, 0 is primary reward and 1-... are partner rewards\\r\\n    address[] public rewardTokens;\\r\\n\\r\\n    /// contract responsible for distributing primary rewards (should be Gauge Proxy)\\r\\n    address public gaugeProxy;\\r\\n\\r\\n    /// Distribution interval for primary reward token\\r\\n    uint256 public constant PRIMARY_REWARD_DURATION = 7 days;\\r\\n    mapping(address => uint256) partnerRewardDurations;\\r\\n\\r\\n    /// Used to keep track of reward token intervals\\r\\n    // token => time\\r\\n    mapping (address => uint256) public periodFinish;\\r\\n    mapping (address => uint256) public lastUpdateTime;\\r\\n\\r\\n    /// Rewards per second for each reward token\\r\\n    mapping (address => uint256) public rewardRates;\\r\\n\\r\\n    // token => amount\\r\\n    mapping (address => uint256) public rewardPerTokenStored;\\r\\n\\r\\n    /// @dev user => reward token => amount\\r\\n    mapping(address => mapping (address => uint256)) public userRewardPerTokenPaid;\\r\\n\\r\\n    /// @dev user => reward token => amount\\r\\n    mapping(address => mapping (address => uint256)) public rewards;\\r\\n\\r\\n    /// total supply of the primary reward token and partner reward tokens\\r\\n    uint256 private _totalLPTokenSupply;\\r\\n\\r\\n    uint256 totalBoost; // The sum of all users boost factors!\\r\\n\\r\\n    /// user => LP token balance\\r\\n    mapping(address => uint256) private _lpTokenBalances;\\r\\n\\r\\n    /// user => boost factor\\r\\n    mapping(address => uint256) public boostFactors;\\r\\n\\r\\n    /// PARTNER STUFF:\\r\\n\\r\\n    /// partner reward token => partner, used to determine permission for setting reward rates\\r\\n    mapping(address => address) public tokenPartners;\\r\\n\\r\\n    // ==================== Modifiers ==================== //\\r\\n\\r\\n    // Affects all rewards\\r\\n    modifier updateRewards(address account) {\\r\\n        for (uint256 i = 0; i < rewardTokens.length; ++i) { // For each reward token\\r\\n            address token = rewardTokens[i];\\r\\n            rewardPerTokenStored[token] = rewardPerToken(token); // Update total rewards available for token\\r\\n            lastUpdateTime[token] = lastTimeRewardApplicable(token);\\r\\n            if (account != address(0)) {\\r\\n                rewards[account][token] = earned(account, token); // Update users allocation out of total rewards for token\\r\\n                userRewardPerTokenPaid[account][token] = rewardPerTokenStored[token]; // Keep track of what we have allocated so far for the user\\r\\n            }\\r\\n        }\\r\\n        _; // execute function this modifier is attached to\\r\\n        if (account != address(0)) {\\r\\n            updateTotalBoostFactor(account); // update the total boost factor based on the users current status\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Affects only one reward\\r\\n    modifier updateReward(address account, uint256 tokenIndex) {\\r\\n        require(tokenIndex < rewardTokens.length, \\\"Invalid token index\\\");\\r\\n        address token = rewardTokens[tokenIndex];\\r\\n        rewardPerTokenStored[token] = rewardPerToken(token);\\r\\n        lastUpdateTime[token] = lastTimeRewardApplicable(token);\\r\\n        if (account != address(0)) {\\r\\n            rewards[account][token] = earned(account, token);\\r\\n            userRewardPerTokenPaid[account][token] = rewardPerTokenStored[token];\\r\\n        }\\r\\n        _;\\r\\n        if (account != address(0)) {\\r\\n            updateTotalBoostFactor(account);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    modifier onlyDistribution() {\\r\\n        require(msg.sender == gaugeProxy, \\\"Gauge: not distribution contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier validAddress(address _rewardToken) {\\r\\n        require(Address.isContract(_rewardToken), \\\"Gauge: not a contract\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _poolToken,\\r\\n        address _owner,\\r\\n        address _veAxial,\\r\\n        address _primaryRewardToken\\r\\n    ) {\\r\\n        poolToken = IERC20(_poolToken);\\r\\n        governance = _owner;\\r\\n        VEAXIAL = AccruingStake(_veAxial);\\r\\n        rewardTokens.push(_primaryRewardToken);\\r\\n        gaugeProxy = msg.sender;\\r\\n    }\\r\\n\\r\\n    // ==================== Reward Token Logic ==================== //\\r\\n\\r\\n    /// @notice adding a reward token to our array\\r\\n    /// @param tokenAddress Reward token to be added to our rewardTokens array\\r\\n    /// @param partnerAddress Address of partner who has permission to set the token reward rate\\r\\n    function addRewardToken(address tokenAddress, address partnerAddress)\\r\\n        public\\r\\n        onlyGovernance\\r\\n        validAddress(tokenAddress)\\r\\n    {\\r\\n        require(tokenPartners[tokenAddress] == address(0), \\\"Token already in use\\\");\\r\\n        tokenPartners[tokenAddress] = partnerAddress; // certify partner with the authority to provide rewards for the token\\r\\n        rewardTokens.push(tokenAddress); // add token to our list of reward token addresses\\r\\n    }\\r\\n\\r\\n    /// @notice returns the amount of reward tokens for the gauge\\r\\n    function getNumRewardTokens() public view returns (uint256) {\\r\\n        return rewardTokens.length;\\r\\n    }\\r\\n\\r\\n    function partnerDepositRewardTokens(address tokenAddress, uint256 amount, uint256 rewardPerSec) external updateRewards(address(0)) {\\r\\n        require(tokenPartners[tokenAddress] == msg.sender, \\\"You do not have the right.\\\");\\r\\n        require (rewardPerSec != 0, \\\"Cannot set reward rate to 0\\\");\\r\\n        IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), amount);\\r\\n\\r\\n        // Get balance in case there was some pending balance\\r\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n\\r\\n        uint duration = balance / rewardPerSec;\\r\\n\\r\\n        lastUpdateTime[tokenAddress] = block.timestamp;\\r\\n        periodFinish[tokenAddress] = block.timestamp.add(duration);\\r\\n        rewardRates[tokenAddress] = rewardPerSec; // Just set the reward rate even if there is still pending balance\\r\\n        emit RewardAdded(amount, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice return how many of our reward tokens is the user receiving per lp token at the current point in time\\r\\n    /// @dev (e.g. how many teddy or axial is received per AC4D token)\\r\\n    function rewardPerToken(address token) public view returns (uint256) {\\r\\n        if (_totalLPTokenSupply == 0 || totalBoost == 0) {\\r\\n            return rewardPerTokenStored[token];\\r\\n        }\\r\\n        // x = rPTS + (lTRA - lUT) * rR * 1e18 / tB\\r\\n        return rewardPerTokenStored[token] + \\r\\n        ((lastTimeRewardApplicable(token) - lastUpdateTime[token]) * rewardRates[token] * 1e18 /\\r\\n        totalBoost);\\r\\n    }\\r\\n\\r\\n    /// @notice getting the reward to be received for primary tokens respective staking period\\r\\n    function getRewardForDuration() external view returns (uint256)\\r\\n    {\\r\\n        address token = rewardTokens[0];\\r\\n        return rewardRates[token].mul(PRIMARY_REWARD_DURATION);\\r\\n    }\\r\\n\\r\\n    /// @notice gets the amount of reward tokens that the user has earned\\r\\n    function earned(address account, address token)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // x = (bF * ( rPT - uRPTP ) / 1e18 ) + r\\r\\n        return (boostFactors[account] * (rewardPerToken(token) - userRewardPerTokenPaid[account][token]) / 1e18) + rewards[account][token];\\r\\n    }\\r\\n\\r\\n    /// @notice This function is to allow us to update the gaugeProxy without resetting the old gauges.\\r\\n    /// @dev this changes where it is receiving the axial tokens, as well as changes the governance\\r\\n    function changeDistribution(address _distribution) external onlyGovernance {\\r\\n        gaugeProxy = _distribution;\\r\\n    }\\r\\n\\r\\n    /// @notice total supply of our lp tokens in the gauge (e.g. AC4D tokens present)\\r\\n    function totalSupply() external view returns (uint256) {\\r\\n        return _totalLPTokenSupply;\\r\\n    }\\r\\n\\r\\n    /// @notice balance of lp tokens that user has in the gauge (e.g. amount of AC4D a user has)\\r\\n    function balanceOf(address account) external view returns (uint256) {\\r\\n        return _lpTokenBalances[account];\\r\\n    }\\r\\n\\r\\n    function lastTimeRewardApplicable(address token) public view returns (uint256) {\\r\\n        return Math.min(block.timestamp, periodFinish[token]);\\r\\n    }\\r\\n\\r\\n    // returns the users share of the total LP supply * 1e18\\r\\n    function userShare(address account) external view returns (uint256) {\\r\\n        if (_totalLPTokenSupply == 0) return 0;\\r\\n        return _lpTokenBalances[account] * 1e18 / _totalLPTokenSupply;\\r\\n    }\\r\\n\\r\\n    /// @notice returns boost factor for specified account\\r\\n    function boostFactor(address account) public view returns (uint256) {\\r\\n        uint256 _userBalanceInGauge = _lpTokenBalances[account];\\r\\n\\r\\n        // Save some gas if this function is entered early\\r\\n        if (_userBalanceInGauge == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // user / total = share\\r\\n        uint256 usersVeAxialBalance = VEAXIAL.getAccrued(account);\\r\\n        uint256 totalVeAxial = VEAXIAL.getTotalAccrued();\\r\\n\\r\\n        // Don't divide by zero!\\r\\n        uint256 denominator = _totalLPTokenSupply + totalVeAxial;\\r\\n        if (denominator == 0) return 0;\\r\\n\\r\\n        // Add users veAxial share to pool share ratio\\r\\n        // If numerator and denominator are multiplicative, users will be punished for their relative veAxial balance\\r\\n        uint256 numerator = (_lpTokenBalances[account] + usersVeAxialBalance) * 1e18;\\r\\n        return numerator / denominator;\\r\\n    }\\r\\n\\r\\n    function updateTotalBoostFactor(address account) public {\\r\\n        totalBoost -= boostFactors[account]; // Subtract users boost factor from total\\r\\n        boostFactors[account] = boostFactor(account); // Update users boost factor\\r\\n        totalBoost += boostFactors[account]; // Add new boost factor to total\\r\\n    }\\r\\n\\r\\n    /// @notice internal deposit function\\r\\n    function _deposit(uint256 amount, address account)\\r\\n        internal\\r\\n        nonReentrant\\r\\n        updateRewards(account)\\r\\n    {\\r\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\r\\n        poolToken.safeTransferFrom(account, address(this), amount);\\r\\n        _totalLPTokenSupply = _totalLPTokenSupply.add(amount);\\r\\n        _lpTokenBalances[account] = _lpTokenBalances[account].add(amount);\\r\\n        emit Staked(account, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice deposits all pool tokens to the gauge\\r\\n    function depositAll() external {\\r\\n        _deposit(poolToken.balanceOf(msg.sender), msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice deposits specified amount of tokens into the gauge from msg.sender\\r\\n    function deposit(uint256 amount) external {\\r\\n        _deposit(amount, msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice deposit specified amount of tokens into the gauge on behalf of specified account\\r\\n    /// @param amount amount of tokens to be deposited\\r\\n    /// @param account account to deposit from\\r\\n    function depositFor(uint256 amount, address account) external {\\r\\n        require(account != address(this), \\\"!account\\\"); // prevent inflation\\r\\n        _deposit(amount, account);\\r\\n    }\\r\\n\\r\\n    /// @notice internal withdraw function\\r\\n    function _withdraw(uint256 amount)\\r\\n        internal\\r\\n        nonReentrant\\r\\n        updateRewards(msg.sender)\\r\\n    {\\r\\n        poolToken.safeTransfer(msg.sender, amount);\\r\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\r\\n        _totalLPTokenSupply = _totalLPTokenSupply.sub(amount);\\r\\n        _lpTokenBalances[msg.sender] = _lpTokenBalances[msg.sender].sub(amount);\\r\\n        emit Withdrawn(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraws all pool tokens from the gauge\\r\\n    function withdrawAll() external {\\r\\n        _withdraw(_lpTokenBalances[msg.sender]);\\r\\n    }\\r\\n\\r\\n    /// @notice withdraw specified amount of primary pool tokens from the message senders balance\\r\\n    function withdraw(uint256 amount) external {\\r\\n        _withdraw(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice get reward tokens from gauge\\r\\n    function getReward(uint256 tokenIndex)\\r\\n        public\\r\\n        nonReentrant\\r\\n        updateReward(msg.sender, tokenIndex)\\r\\n    {\\r\\n        address token = rewardTokens[tokenIndex];\\r\\n        require(token != address(0), \\\"Reward token does not exist\\\");\\r\\n        uint256 reward = rewards[msg.sender][token];\\r\\n        if (reward > 0) {\\r\\n            IERC20(token).safeTransfer(msg.sender, reward);\\r\\n            rewards[msg.sender][token] = 0;\\r\\n            emit RewardPaid(msg.sender, reward, token);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice claims specific reward indices\\r\\n    function getRewards(uint256[] calldata tokenIndices) public {\\r\\n        for (uint256 i = 0; i < tokenIndices.length; ++i) {\\r\\n            getReward(tokenIndices[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // /// @notice claims all rewards\\r\\n    function getAllRewards() public {\\r\\n        for (uint256 i = 0; i < rewardTokens.length; ++i) {\\r\\n            getReward(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice withdraw deposited pool tokens and claim reward tokens\\r\\n    function exit() external {\\r\\n        _withdraw(_lpTokenBalances[msg.sender]);\\r\\n        getAllRewards();\\r\\n    }\\r\\n\\r\\n    /// @notice only called by the GaugeProxy and so only deals in the native token\\r\\n    function notifyRewardAmount(uint256 reward)\\r\\n        external\\r\\n        onlyDistribution\\r\\n        updateRewards(address(0))\\r\\n    {\\r\\n        address token = rewardTokens[0];\\r\\n        IERC20(token).safeTransferFrom(\\r\\n            gaugeProxy,\\r\\n            address(this),\\r\\n            reward\\r\\n        );\\r\\n        rewardRates[token] = reward.div(PRIMARY_REWARD_DURATION);\\r\\n\\r\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\r\\n        // This keeps the reward rate in the right range, preventing overflows due to\\r\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\r\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\r\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\r\\n        require(\\r\\n            rewardRates[token] <= balance.div(PRIMARY_REWARD_DURATION),\\r\\n            \\\"Provided reward too high\\\"\\r\\n        );\\r\\n\\r\\n        lastUpdateTime[token] = block.timestamp;\\r\\n        periodFinish[token] = block.timestamp.add(PRIMARY_REWARD_DURATION);\\r\\n        emit RewardAdded(reward, token);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2db01094f2816e4141444c4cede63feda2caf26bae61041587ffab56daec93df\",\"license\":\"MIT\"},\"contracts/GaugeProxy.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport {ProtocolGovernance} from \\\"./libraries/ProtocolGovernance.sol\\\";\\r\\nimport {Strategist} from \\\"./libraries/Strategist.sol\\\";\\r\\nimport {AccruingStake} from \\\"./AccruingStake.sol\\\";\\r\\nimport {VestingStake} from \\\"./VestingStake.sol\\\";\\r\\nimport {IMasterChef} from \\\"./interfaces/IMasterChef.sol\\\";\\r\\nimport {AxialDummyToken} from \\\"./AxialDummyToken.sol\\\";\\r\\nimport {Gauge} from \\\"./Gauge.sol\\\";\\r\\n\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ncontract GaugeProxy is ProtocolGovernance {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // ==================== External Dependencies ==================== //\\r\\n\\r\\n    /// @notice Master Chef Axial V2 contract\\r\\n    IMasterChef public MCAV2;\\r\\n\\r\\n    /// @notice token for voting on Axial distribution to pools - SAXIAL\\r\\n    VestingStake public immutable sAxial;\\r\\n\\r\\n    /// @notice the Axial token contraxt\\r\\n    IERC20 public immutable Axial;\\r\\n\\r\\n    /// @notice dummy token required for masterchef deposits and withdrawals\\r\\n    IERC20 public immutable axialDummyToken;\\r\\n\\r\\n    /// @notice token to allow boosting rewards - VEAXIAL\\r\\n    /// @dev This could be an address instead, as we do not use it other than passing the address to the Gauge constructor\\r\\n    AccruingStake public immutable veAxial;\\r\\n\\r\\n    // ==================== Token Voting Storage ==================== //\\r\\n\\r\\n    /// @notice max time allowed to pass before distribution (6 hours)\\r\\n    uint256 public constant DISTRIBUTION_DEADLINE = 21600;\\r\\n\\r\\n    uint256 public pid = 0;\\r\\n    uint256 public totalWeight;\\r\\n    uint256 private lockedTotalWeight;\\r\\n    uint256 private lockedBalance;\\r\\n    uint256 private locktime;\\r\\n\\r\\n    address[] internal _tokens;\\r\\n\\r\\n    /// @dev token -> gauge\\r\\n    mapping(address => address) public gauges;\\r\\n    /// @dev token => gauge\\r\\n    mapping(address => address) public deprecated;\\r\\n    /// @dev token => weight\\r\\n    mapping(address => uint256) public weights;\\r\\n    /// @dev token => weight\\r\\n    mapping(address => uint256) private lockedWeights;\\r\\n    /// @dev msg.sender => token => votes\\r\\n    mapping(address => mapping(address => uint256)) public votes;\\r\\n    /// @dev msg.sender => token\\r\\n    mapping(address => address[]) public tokenVote;\\r\\n    /// @dev msg.sender => total voting weight of user\\r\\n    mapping(address => uint256) public usedWeights;\\r\\n    mapping(address => bool) public deployers;\\r\\n\\r\\n    constructor(\\r\\n        address _governance,\\r\\n        address _axial,\\r\\n        address _saxial,\\r\\n        address _veaxial\\r\\n    ) {\\r\\n        governance = _governance;\\r\\n        Axial = IERC20(_axial);\\r\\n        sAxial = VestingStake(_saxial);\\r\\n        veAxial = AccruingStake(_veaxial);\\r\\n        axialDummyToken = new AxialDummyToken();\\r\\n    }\\r\\n\\r\\n    // ==================== Admin functions ==================== //\\r\\n\\r\\n    /// @notice adds the specified address to the list of deployers\\r\\n    /// @dev deployers can call distribute function\\r\\n    function addDeployer(address _deployer) external onlyGovernance {\\r\\n        deployers[_deployer] = true;\\r\\n    }\\r\\n\\r\\n    /// @notice removes the specified address from the list of deployers\\r\\n    function removeDeployer(address _deployer) external onlyGovernance {\\r\\n        deployers[_deployer] = false;\\r\\n    }\\r\\n\\r\\n    // ==================== Modifiers ==================== //\\r\\n\\r\\n    /// @notice modifier to restrict functinos to governance or strategist roles\\r\\n    modifier onlyBenevolent() {\\r\\n        require(msg.sender == governance, \\\"unauthorized sender\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // ==================== View functions ==================== //\\r\\n\\r\\n    /// @notice returns the list of tokens that are currently being voted on\\r\\n    function tokens() external view returns (address[] memory) {\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    /// @notice returns the gauge for the specifi(AccruingStake)\\r\\n    function getGauge(address _token) external view returns (address) {\\r\\n        return gauges[_token];\\r\\n    }\\r\\n\\r\\n    /// @notice returns the number of tokens currently being voted on\\r\\n    function length() external view returns (uint256) {\\r\\n        return _tokens.length;\\r\\n    }\\r\\n\\r\\n    // ==================== Voting Logic ==================== //\\r\\n\\r\\n    /// @notice Vote with SAXIAL on a gauge, removing any previous votes\\r\\n    /// @param _tokenVote: the array of tokens which will recieve tokens\\r\\n    /// @param _weights: the weights to associate with the tokens listed in _tokenVote\\r\\n    function vote(address[] calldata _tokenVote, uint256[] calldata _weights)\\r\\n        external\\r\\n    {\\r\\n        require(\\r\\n            _tokenVote.length == _weights.length,\\r\\n            \\\"weight/tokenvote length mismatch\\\"\\r\\n        );\\r\\n        _vote(msg.sender, _tokenVote, _weights);\\r\\n    }\\r\\n\\r\\n    /// @notice internal voting function\\r\\n    function _vote(\\r\\n        address _owner,\\r\\n        address[] memory _tokenVote,\\r\\n        uint256[] memory _weights\\r\\n    ) internal {\\r\\n        // reset votes of the owner\\r\\n        _reset(_owner);\\r\\n        uint256 _tokenCnt = _tokenVote.length;\\r\\n        uint256 _weight = sAxial.getPower(_owner);\\r\\n        uint256 _totalVoteWeight = 0;\\r\\n        uint256 _usedWeight = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenCnt; i++) {\\r\\n            _totalVoteWeight = _totalVoteWeight.add(_weights[i]);\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenCnt; i++) {\\r\\n            address _token = _tokenVote[i];\\r\\n            address _gauge = gauges[_token];\\r\\n            // Calculate quantity of users SAXIAL to allocate for the gauge\\r\\n            uint256 _tokenWeight = _weights[i].mul(_weight).div(\\r\\n                _totalVoteWeight\\r\\n            );\\r\\n\\r\\n            if (_gauge != address(0x0)) {\\r\\n                _usedWeight = _usedWeight.add(_tokenWeight);\\r\\n                totalWeight = totalWeight.add(_tokenWeight);\\r\\n                weights[_token] = weights[_token].add(_tokenWeight);\\r\\n                tokenVote[_owner].push(_token);\\r\\n                votes[_owner][_token] = _tokenWeight;\\r\\n            }\\r\\n        }\\r\\n        usedWeights[_owner] = _usedWeight;\\r\\n    }\\r\\n\\r\\n    /// @notice Reset votes of msg.sender to 0\\r\\n    function reset() external {\\r\\n        _reset(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to reset votes of the specified address to 0\\r\\n    /// @param _owner address of owner of votes to be reset\\r\\n    function _reset(address _owner) internal {\\r\\n        // Get all tokens that the owner has voted on\\r\\n        address[] storage _tokenVote = tokenVote[_owner];\\r\\n        uint256 _tokenVoteCnt = _tokenVote.length;\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenVoteCnt; i++) {\\r\\n            address _token = _tokenVote[i];\\r\\n            // Get the amount of SAXIAL this user allocated for this specific token\\r\\n            uint256 _votes = votes[_owner][_token];\\r\\n\\r\\n            if (_votes > 0) {\\r\\n                totalWeight = totalWeight.sub(_votes);\\r\\n                weights[_token] = weights[_token].sub(_votes);\\r\\n\\r\\n                votes[_owner][_token] = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        delete tokenVote[_owner];\\r\\n    }\\r\\n\\r\\n    /// @notice Adjust _owner's votes according to latest _owner's SAXIAL balance\\r\\n    function poke(address _owner) public {\\r\\n        address[] memory _tokenVote = tokenVote[_owner];\\r\\n        uint256 _tokenCnt = _tokenVote.length;\\r\\n        uint256[] memory _weights = new uint256[](_tokenCnt);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokenCnt; i++) {\\r\\n            _weights[i] = votes[_owner][_tokenVote[i]];\\r\\n        }\\r\\n\\r\\n        // _weights no longer total 100 like with the front-end\\r\\n        // But we will minimize gas by not converting\\r\\n        _vote(_owner, _tokenVote, _weights);\\r\\n    }\\r\\n\\r\\n    // ==================== Gauge Logic ==================== //\\r\\n\\r\\n    /// @notice Add new token gauge\\r\\n    function addGauge(address _token) external onlyBenevolent {\\r\\n        require(gauges[_token] == address(0x0), \\\"exists\\\");\\r\\n        gauges[_token] = address(\\r\\n            new Gauge(_token, governance, address(veAxial), address(Axial))\\r\\n        );\\r\\n        _tokens.push(_token);\\r\\n    }\\r\\n\\r\\n    /// @notice Deprecate existing gauge\\r\\n    function deprecateGauge(address _token) external onlyBenevolent {\\r\\n        require(gauges[_token] != address(0x0), \\\"does not exist\\\");\\r\\n        deprecated[_token] = gauges[_token];\\r\\n        delete gauges[_token];\\r\\n    }\\r\\n\\r\\n    /// @notice Bring Deprecated gauge back into use\\r\\n    function renewGauge(address _token) external onlyBenevolent {\\r\\n        require(gauges[_token] == address(0x0), \\\"exists\\\");\\r\\n        require(deprecated[_token] != address(0x0), \\\"not deprecated\\\");\\r\\n        gauges[_token] = deprecated[_token];\\r\\n        delete deprecated[_token];\\r\\n    }\\r\\n\\r\\n    /// @notice Add existing gauge\\r\\n    function migrateGauge(address _gauge, address _token)\\r\\n        external\\r\\n        onlyBenevolent\\r\\n    {\\r\\n        require(gauges[_token] == address(0x0), \\\"exists\\\");\\r\\n        gauges[_token] = _gauge;\\r\\n        _tokens.push(_token);\\r\\n    }\\r\\n\\r\\n    // ==================== MCAV2 Logic ==================== //\\r\\n\\r\\n    /// @notice Sets new MCAV2 address.  Useful for debugging.\\r\\n    function setMasterChef(address _masterChef) external onlyGovernance {\\r\\n        //MCAV2 = IMasterChefAxialV3(_masterChef);\\r\\n        MCAV2 = IMasterChef(_masterChef);\\r\\n        pid = 0;\\r\\n        //pid = UINT256_MAX;\\r\\n    }\\r\\n\\r\\n    /// @notice Sets MCAV2 PID\\r\\n    function setPID(uint256 _pid) external onlyGovernance {\\r\\n        //require(pid == UINT256_MAX, \\\"pid has already been set\\\");\\r\\n        // require(_pid < UINT256_MAX, \\\"invalid pid\\\");\\r\\n        require(pid == 0, \\\"pid has already been set\\\");\\r\\n        require(_pid != 0, \\\"invalid pid\\\");\\r\\n        pid = _pid;\\r\\n    }\\r\\n\\r\\n    /// @notice Deposits Axial dummy token into MCAV2\\r\\n    function depositDummyToken() public {\\r\\n        require(pid != 0, \\\"pid not initialized\\\");\\r\\n        uint256 _balance = axialDummyToken.balanceOf(address(this));\\r\\n        axialDummyToken.safeApprove(address(MCAV2), 0);\\r\\n        axialDummyToken.safeApprove(address(MCAV2), _balance);\\r\\n        MCAV2.deposit(pid, _balance);\\r\\n    }\\r\\n\\r\\n    /// @notice Collects AXIAL from MCAV2 for distribution\\r\\n    function collect() public {\\r\\n        (uint256 _locked, ) = MCAV2.userInfo(pid, address(this));\\r\\n        MCAV2.withdraw(pid, _locked);\\r\\n        depositDummyToken();\\r\\n    }\\r\\n\\r\\n    // ==================== Distribution Logic ==================== //\\r\\n\\r\\n    /// @notice collect AXIAL and update lock information\\r\\n    function preDistribute() external {\\r\\n        require(\\r\\n            deployers[msg.sender] || msg.sender == governance,\\r\\n            \\\"unauthorized sender\\\"\\r\\n        );\\r\\n        lockedTotalWeight = totalWeight;\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            lockedWeights[_tokens[i]] = weights[_tokens[i]];\\r\\n        }\\r\\n        collect();\\r\\n        lockedBalance = Axial.balanceOf(address(this));\\r\\n        locktime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /// @notice Distribute tokens to gauges\\r\\n    function distribute(uint256 _start, uint256 _end) external {\\r\\n        require(\\r\\n            deployers[msg.sender] || msg.sender == governance,\\r\\n            \\\"unauthorized sender\\\"\\r\\n        );\\r\\n        require(_start < _end, \\\"bad _start\\\");\\r\\n        require(_end <= _tokens.length, \\\"bad _end\\\");\\r\\n        require(\\r\\n            locktime + DISTRIBUTION_DEADLINE >= block.timestamp,\\r\\n            \\\"lock expired\\\"\\r\\n        );\\r\\n        if (lockedBalance > 0 && lockedTotalWeight > 0) {\\r\\n            for (uint256 i = _start; i < _end; i++) {\\r\\n                address _token = _tokens[i];\\r\\n                address _gauge = gauges[_token];\\r\\n                uint256 _reward = lockedBalance.mul(lockedWeights[_token]).div(\\r\\n                    totalWeight\\r\\n                );\\r\\n                if (_reward > 0) {\\r\\n                    Axial.safeApprove(_gauge, 0);\\r\\n                    Axial.safeApprove(_gauge, _reward);\\r\\n                    Gauge(_gauge).notifyRewardAmount(_reward);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x960b74feb5159d03fa1cd6840dd165eab2204915ea502dfea184f66de2beab45\",\"license\":\"MIT\"},\"contracts/VestingStake.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/// @title A vesting style staking contract with extendable linear decay\\r\\n/// @author Auroter\\r\\n/// @notice Allows you to lock tokens in exchange for governance tokens\\r\\n/// @notice Locks can be extended or deposited into\\r\\n/// @notice Maximum deposit duration is two years (104 weeks)\\r\\n/// @dev Simply call stake(...) to create initial lock or extend one that already exists for the user\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract VestingStake is ReentrancyGuard, Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Info pertaining to staking contract\\r\\n    address public stakedToken; // An ERC20 Token to be staked (i.e. Axial)\\r\\n    string public name; // New asset after staking (i.e. sAxial)\\r\\n    string public symbol; // New asset symbol after staking (i.e. sAXIAL)\\r\\n    uint256 private interpolationGranularity = 1e18; // Note: ERC20.decimals() is for display and does not affect arithmetic!\\r\\n\\r\\n    // Info pertaining to users\\r\\n    address[] private users; // An array containing all user addresses\\r\\n    mapping(address => LockVe) private locks; // A mapping of each users lock\\r\\n    mapping(address => uint256) private lockedFunds; // A mapping of each users total deposited funds\\r\\n    mapping(address => uint256) private deferredFunds; // A mapping of vested funds the user wishes to leave unclaimed\\r\\n\\r\\n    // Lock structure, only one of these is allowed per user\\r\\n    // A DELTA can be derived as the degree of interpolation between the start/end block:\\r\\n    // Delta = (end - now) / end - start\\r\\n    // This can be used to determine how much of our staked token is unlocked:\\r\\n    // currentAmountLocked = startingAmountLocked - (delta * startingAmountLocked)\\r\\n    struct LockVe {\\r\\n        uint256 startBlockTime;\\r\\n        uint256 endBlockTime;\\r\\n        uint256 startingAmountLocked;\\r\\n        bool initialized;\\r\\n    }\\r\\n\\r\\n    /// @notice Constructor\\r\\n    /// @param _stakedToken Address of the token our users will deposit and lock in exchange for governance tokens\\r\\n    /// @param _name Desired name of our governance token\\r\\n    /// @param _symbol Desired symbol of our governance token\\r\\n    /// @param _governance Address of wallet which will be given adminstrative access to this contract\\r\\n    constructor(\\r\\n        address _stakedToken,\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _governance\\r\\n    ) {\\r\\n        transferOwnership(_governance);\\r\\n        stakedToken = _stakedToken;\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n    }\\r\\n\\r\\n    /// @notice Emitted when a user stakes for the first time\\r\\n    /// @param user Address of the user who staked\\r\\n    /// @param amount Quantity of tokens staked\\r\\n    /// @param duration Length in seconds of stake\\r\\n    event userStaked(address indexed user, uint256 amount, uint256 duration);\\r\\n\\r\\n    /// @notice Emitted when a user extends and/or deposits into their existing stake\\r\\n    /// @param user Address of the user who staked\\r\\n    /// @param amount New total quantity of tokens in stake\\r\\n    /// @param duration New total length of stake\\r\\n    event userExtended(address indexed user, uint256 amount, uint256 duration);\\r\\n\\r\\n    /// @notice Emitted when a user claims outstanding vested balance\\r\\n    /// @param user Address of the user who claimed\\r\\n    /// @param amount Quantity of tokens claimed\\r\\n    event userClaimed(address indexed user, uint256 amount);\\r\\n\\r\\n    /// @notice Calculate the number of vested tokens a user has not claimed\\r\\n    /// @param _userAddr Address of any user to view the number of vested tokens they have not yet claimed\\r\\n    /// @return Quantity of tokens which have vested but are unclaimed by the specified user\\r\\n    function getUnclaimed(address _userAddr) public view returns (uint256) {\\r\\n        uint256 totalFundsDeposited = lockedFunds[_userAddr] + deferredFunds[_userAddr];\\r\\n        uint256 currentBalance = getBalance(_userAddr);\\r\\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\\r\\n        return fundsToClaim;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the number of tokens a user still has locked\\r\\n    /// @param _userAddr Address of any user to view the number of tokens they still have locked\\r\\n    /// @return Quantity of tokens the user has locked\\r\\n    function getBalance(address _userAddr) public view returns (uint256) {\\r\\n        LockVe memory usersLock = locks[_userAddr];\\r\\n\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n        uint256 balance = 0;\\r\\n\\r\\n        if (usersLock.endBlockTime > currentTimestamp) {\\r\\n            uint256 granularDelta = ((usersLock.endBlockTime - currentTimestamp) * interpolationGranularity) / (usersLock.endBlockTime - usersLock.startBlockTime);\\r\\n            balance += (usersLock.startingAmountLocked * granularDelta) / interpolationGranularity;\\r\\n        }\\r\\n        return balance;\\r\\n    }\\r\\n\\r\\n    /// @notice This is an overload for getPower so that users can see the 'token' in their wallets\\r\\n    function balanceOf(address _account) external view returns (uint256) {\\r\\n        return getPower(_account);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculate the number of governance tokens currently allocated to a user by this contract\\r\\n    /// @param _userAddr Address of any user to view the number of governance tokens currently awarded to them\\r\\n    /// @return Quantity of governance tokens allocated to the user\\r\\n    function getPower(address _userAddr) public view returns (uint256) {\\r\\n        LockVe memory usersLock = locks[_userAddr];\\r\\n\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n        uint256 power = 0;\\r\\n\\r\\n        if (usersLock.endBlockTime > currentTimestamp) {\\r\\n            // let delta = elapsed / totalLocktinme\\r\\n            // let startingPower = duration / 2 years\\r\\n            // let power = delta * startingPower\\r\\n            uint256 startingAmountAwarded = ((usersLock.endBlockTime - usersLock.startBlockTime) * usersLock.startingAmountLocked) / 104 weeks;\\r\\n            uint256 granularDelta = ((usersLock.endBlockTime - currentTimestamp) * interpolationGranularity) / (usersLock.endBlockTime - usersLock.startBlockTime);\\r\\n            power += (startingAmountAwarded * granularDelta) / interpolationGranularity;\\r\\n        }\\r\\n        return power;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieve a list of all users who have ever staked\\r\\n    /// @return An array of addresses of all users who have ever staked\\r\\n    function getAllUsers() public view returns (address[] memory) {\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    /// @notice Check if a user has ever created a Lock in this contract\\r\\n    /// @param _userAddr Address of any user to check\\r\\n    /// @dev This may be used by the web application to determine if the UI says \\\"Create Lock\\\" or \\\"Add to Lock\\\"\\r\\n    /// @return True if the user has ever created a lock\\r\\n    function isUserLocked(address _userAddr) public view returns (bool) {\\r\\n        LockVe memory usersLock = locks[_userAddr];\\r\\n        return usersLock.initialized;\\r\\n    }\\r\\n\\r\\n    /// @notice View a users Lock\\r\\n    /// @param _userAddr Address of any user to view all Locks they have ever created\\r\\n    /// @dev This may be used by the web application for graphical illustration purposes\\r\\n    /// @return Users Lock in the format of the LockVe struct\\r\\n    function getLock(address _userAddr) public view returns (LockVe memory) {\\r\\n        return locks[_userAddr];\\r\\n    }\\r\\n\\r\\n    /// @notice Allow owner to reclaim tokens not matching the deposit token\\r\\n    /// @notice Some users may have accidentally sent these to the contract\\r\\n    /// @param _token Address of the non-deposit token\\r\\n    /// @dev Always ensure the _token is legitimate before calling this\\r\\n    /// @dev A bad token can mimic safetransfer or balanceof with a nocive function\\r\\n    function ownerRemoveNonDepositToken(address _token) public nonReentrant onlyOwner {\\r\\n        require(_token != stakedToken, \\\"!invalid\\\");\\r\\n        uint256 balanceOfToken = IERC20(_token).balanceOf(address(this));\\r\\n        require(balanceOfToken > 0, \\\"!balance\\\");\\r\\n        IERC20(_token).safeTransfer(owner(), balanceOfToken);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers vested tokens back to their original owner\\r\\n    /// @notice It is up to the user to invoke this manually\\r\\n    /// @dev This will need to be called by the web application via a button or some other means\\r\\n    function claimMyFunds() external nonReentrant {\\r\\n        address userAddr = msg.sender;\\r\\n        uint256 totalFundsDeposited = lockedFunds[userAddr] + deferredFunds[userAddr];\\r\\n        uint256 currentBalance = getBalance(userAddr);\\r\\n        uint256 fundsToClaim = totalFundsDeposited - currentBalance;\\r\\n\\r\\n        IERC20(stakedToken).safeTransfer(userAddr, fundsToClaim);\\r\\n\\r\\n        lockedFunds[userAddr] = currentBalance;\\r\\n        deferredFunds[userAddr] = 0;\\r\\n\\r\\n        emit userClaimed(userAddr, fundsToClaim);\\r\\n    }\\r\\n\\r\\n    /// @notice Create/extend the duration of the invoking users lock and/or deposit additional tokens into it\\r\\n    /// @param _duration Number of seconds the invoking user will extend their lock for\\r\\n    /// @param _amount Number of additional tokens to deposit into the lock\\r\\n    /// @param _deferUnclaimed If True, leaves any unclaimed vested balance in the staking contract\\r\\n    function stake(uint256 _duration, uint256 _amount, bool _deferUnclaimed) public nonReentrant {\\r\\n        require(_duration > 0 || _amount > 0, \\\"null\\\");\\r\\n\\r\\n        // Retrieve lock the user may have already created\\r\\n        address userAddr = msg.sender;\\r\\n        LockVe memory usersLock = locks[userAddr];\\r\\n\\r\\n        uint256 oldDurationRemaining = 0;\\r\\n\\r\\n        // Keep track of new user or pre-existing lockout period\\r\\n        if (!usersLock.initialized) {\\r\\n            users.push(userAddr);\\r\\n        } else if (block.timestamp < usersLock.endBlockTime) {\\r\\n            oldDurationRemaining = usersLock.endBlockTime - block.timestamp;\\r\\n        }\\r\\n\\r\\n        require (oldDurationRemaining + _duration <= 104 weeks, \\\">2 years\\\");\\r\\n\\r\\n        // Receive the users tokens\\r\\n        require(IERC20(stakedToken).balanceOf(userAddr) >= _amount, \\\"!balance\\\");\\r\\n        require(IERC20(stakedToken).allowance(userAddr, address(this)) >= _amount, \\\"!approved\\\");\\r\\n        IERC20(stakedToken).safeTransferFrom(userAddr,  address(this), _amount);\\r\\n\\r\\n        // Account for balance / unclaimed funds\\r\\n        uint256 totalFundsDeposited = lockedFunds[userAddr];\\r\\n        uint256 oldBalance = getBalance(userAddr);\\r\\n        uint256 fundsUnclaimed = totalFundsDeposited - oldBalance;\\r\\n        if (!_deferUnclaimed) {\\r\\n            fundsUnclaimed += deferredFunds[userAddr];\\r\\n            IERC20(stakedToken).safeTransfer(userAddr, fundsUnclaimed);\\r\\n            deferredFunds[userAddr] = 0;\\r\\n            emit userClaimed(userAddr, fundsUnclaimed);\\r\\n        } else {\\r\\n            deferredFunds[userAddr] += fundsUnclaimed;\\r\\n        }\\r\\n        uint256 newTotalDeposit = oldBalance + _amount;\\r\\n\\r\\n        // Update balance\\r\\n        lockedFunds[userAddr] = newTotalDeposit;\\r\\n\\r\\n        // Fill out updated LockVe struct\\r\\n        LockVe memory newLock;\\r\\n        newLock.startBlockTime = block.timestamp;\\r\\n        newLock.endBlockTime = newLock.startBlockTime + _duration + oldDurationRemaining;\\r\\n        newLock.startingAmountLocked = newTotalDeposit;\\r\\n        newLock.initialized = true;\\r\\n        locks[userAddr] = newLock;\\r\\n\\r\\n        // Events\\r\\n        if (oldDurationRemaining == 0) {\\r\\n            emit userStaked(userAddr, newTotalDeposit, newLock.endBlockTime - newLock.startBlockTime);\\r\\n        } else {\\r\\n            emit userExtended(userAddr, newTotalDeposit, newLock.endBlockTime - newLock.startBlockTime);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6958d18a5cb9bbe87c498ac0c2b568233c05dcd66ceea89d021701770d9be6e9\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterChef.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title Master Chef V2(MCAV2) interface\\r\\n/// @notice Interface for the MCAV2 contract that will control minting of AXIAL\\r\\ninterface IMasterChef {\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 allocPoint; // How many allocation points assigned to this pool. AXIALs to distribute per second.\\r\\n        uint256 lastRewardTimestamp; // Last timestamp that AXIALs distribution occurs.\\r\\n        uint256 accAxialPerShare; // Accumulated AXIALs per share, times 1e12. See below.\\r\\n    }\\r\\n\\r\\n    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\\r\\n\\r\\n    function totalAllocPoint() external view returns (uint256);\\r\\n\\r\\n    function axialPerSec() external view returns (uint256);\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) external;\\r\\n\\r\\n    function devPercent() external view returns (uint256);\\r\\n\\r\\n    function treasuryPercent() external view returns (uint256);\\r\\n\\r\\n    function investorPercent() external view returns (uint256);\\r\\n\\r\\n    function userInfo(uint256 pid, address addr) external view returns (uint256, uint256);\\r\\n\\r\\n    function withdraw(uint256 pid, uint256 amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x55d451c00f554e002b6d5bf916ddbc1305bf086b58bbbad8395f64f35817bc6c\",\"license\":\"MIT\"},\"contracts/libraries/ProtocolGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ncontract ProtocolGovernance {\\r\\n    /// @notice address of the governance contract\\r\\n    address public governance;\\r\\n    address public pendingGovernance;\\r\\n\\r\\n    /// @notice modifier to allow for easy gov only control over a function\\r\\n    modifier onlyGovernance() {\\r\\n        require(msg.sender == governance, \\\"unauthorized sender (governance\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows governance to change governance (for future upgradability)\\r\\n    /// @param _governance new governance address to set\\r\\n    function setGovernance(address _governance) external onlyGovernance {\\r\\n        pendingGovernance = _governance;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows pendingGovernance to accept their role as governance (protection pattern)\\r\\n    function acceptGovernance() external {\\r\\n        require(\\r\\n            msg.sender == pendingGovernance,\\r\\n            \\\"acceptGovernance: !pendingGov\\\"\\r\\n        );\\r\\n        governance = pendingGovernance;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa66c822c97507144ea97f9cd53c68bff6f5a572b2e706a0c5bb7e928cc864bac\",\"license\":\"MIT\"},\"contracts/libraries/Strategist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ncontract Strategist {\\r\\n    /// @notice strategist address for the strategist contract\\r\\n    address public strategist;\\r\\n    address public pendingStrategist;\\r\\n\\r\\n    /// @notice modifier to allow for easy gov only control over a function\\r\\n    modifier onlyStrategist() {\\r\\n        require(msg.sender == strategist, \\\"unauthorized sender (strategist)\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows strategist to change strategist (for future upgradability)\\r\\n    /// @param _strategist new strategist address to set\\r\\n    function setStrategist(address _strategist) external onlyStrategist {\\r\\n        pendingStrategist = _strategist;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows pendingStrategist to accept their role as strategist\\r\\n    function acceptStrategist() external {\\r\\n        require(\\r\\n            msg.sender == pendingStrategist,\\r\\n            \\\"unauthorized sender (pendingStrategist)\\\"\\r\\n        );\\r\\n        strategist = pendingStrategist;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4be28c9c2c94b466b993835f059ee83935b1ef0819b61546b2054fece629802d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addDeployer(address)": {
        "details": "deployers can call distribute function"
      },
      "setGovernance(address)": {
        "params": {
          "_governance": "new governance address to set"
        }
      },
      "vote(address[],uint256[])": {
        "params": {
          "_tokenVote": ": the array of tokens which will recieve tokens",
          "_weights": ": the weights to associate with the tokens listed in _tokenVote"
        }
      }
    },
    "stateVariables": {
      "deprecated": {
        "details": "token => gauge"
      },
      "gauges": {
        "details": "token -> gauge"
      },
      "lockedWeights": {
        "details": "token => weight"
      },
      "tokenVote": {
        "details": "msg.sender => token"
      },
      "usedWeights": {
        "details": "msg.sender => total voting weight of user"
      },
      "veAxial": {
        "details": "This could be an address instead, as we do not use it other than passing the address to the Gauge constructor"
      },
      "votes": {
        "details": "msg.sender => token => votes"
      },
      "weights": {
        "details": "token => weight"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "Axial()": {
        "notice": "the Axial token contraxt"
      },
      "DISTRIBUTION_DEADLINE()": {
        "notice": "max time allowed to pass before distribution (6 hours)"
      },
      "MCAV2()": {
        "notice": "Master Chef Axial V2 contract"
      },
      "acceptGovernance()": {
        "notice": "Allows pendingGovernance to accept their role as governance (protection pattern)"
      },
      "addDeployer(address)": {
        "notice": "adds the specified address to the list of deployers"
      },
      "addGauge(address)": {
        "notice": "Add new token gauge"
      },
      "axialDummyToken()": {
        "notice": "dummy token required for masterchef deposits and withdrawals"
      },
      "collect()": {
        "notice": "Collects AXIAL from MCAV2 for distribution"
      },
      "depositDummyToken()": {
        "notice": "Deposits Axial dummy token into MCAV2"
      },
      "deprecateGauge(address)": {
        "notice": "Deprecate existing gauge"
      },
      "distribute(uint256,uint256)": {
        "notice": "Distribute tokens to gauges"
      },
      "getGauge(address)": {
        "notice": "returns the gauge for the specifi(AccruingStake)"
      },
      "governance()": {
        "notice": "address of the governance contract"
      },
      "length()": {
        "notice": "returns the number of tokens currently being voted on"
      },
      "migrateGauge(address,address)": {
        "notice": "Add existing gauge"
      },
      "poke(address)": {
        "notice": "Adjust _owner's votes according to latest _owner's SAXIAL balance"
      },
      "preDistribute()": {
        "notice": "collect AXIAL and update lock information"
      },
      "removeDeployer(address)": {
        "notice": "removes the specified address from the list of deployers"
      },
      "renewGauge(address)": {
        "notice": "Bring Deprecated gauge back into use"
      },
      "reset()": {
        "notice": "Reset votes of msg.sender to 0"
      },
      "sAxial()": {
        "notice": "token for voting on Axial distribution to pools - SAXIAL"
      },
      "setGovernance(address)": {
        "notice": "Allows governance to change governance (for future upgradability)"
      },
      "setMasterChef(address)": {
        "notice": "Sets new MCAV2 address.  Useful for debugging."
      },
      "setPID(uint256)": {
        "notice": "Sets MCAV2 PID"
      },
      "tokens()": {
        "notice": "returns the list of tokens that are currently being voted on"
      },
      "veAxial()": {
        "notice": "token to allow boosting rewards - VEAXIAL"
      },
      "vote(address[],uint256[])": {
        "notice": "Vote with SAXIAL on a gauge, removing any previous votes"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6948,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6950,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3972,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "MCAV2",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMasterChef)6943"
      },
      {
        "astId": 3995,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "pid",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3997,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "totalWeight",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3999,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "lockedTotalWeight",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4001,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "lockedBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4003,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "locktime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4006,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "_tokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4011,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "gauges",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4016,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "deprecated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4021,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "weights",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4026,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "lockedWeights",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4033,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "votes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4039,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "tokenVote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4044,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "usedWeights",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4048,
        "contract": "contracts/GaugeProxy.sol:GaugeProxy",
        "label": "deployers",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterChef)6943": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}